# $Header$
#
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2017
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
#################################################################
##
## AUTHOR: Reinhard Resch <r.resch@secop.com>
##        Copyright (C) 2011(-2017) all rights reserved.
##
##        The copyright of this code is transferred
##        to Pierangelo Masarati and Paolo Mantegazza
##        for use in the software MBDyn as described
##        in the GNU Public License version 2.1
##
##################################################################

#{
# BEGIN OF MBDYN SECTION

# module load: "libmodule-octave.la";

set: real tau1 = 1e-10;
set: real tau2 = 0.1;

set: real f = 3;
set: real F0 = 130;
set: real r = 15.5;

set: real sx = 7500;
set: real sy = 4800;
set: real sz = 3200;
set: real sPhix = 125;
set: real sPhiy = 238;
set: real sPhiz = 357;
set: real ks = 0.003;

begin: data;
	problem: initial value; # the default
end: data;

begin: initial value;
	initial time: 0;
	final time: 1;
    time step: 0.0005;
	max time step: 0.0005;
    min time step: 0.00001;
	strategy: factor, 0.8, 1, 1.25, 1, 3, 6;
#    derivatives coefficient: 1e-8;
    derivatives tolerance: 1e-5;
    derivatives max iterations: 10;
    output: counter;
#    output: residual;
end: initial value;

begin: control data;
    structural nodes: 3;
    abstract nodes: 1;
    rigid bodies: 2;
    forces: 3;
    joints: 3;
    genels: 2;
end: control data;
    
begin: nodes;
    structural: 1, dynamic,
        position, reference, global, null,
        orientation, reference, global, eye,
        velocity, reference, global, null,
        angular velocity, reference, global, null, 
        accelerations, yes;

    structural: 2, dynamic,
        position, reference, global, null,
        orientation, reference, global, eye,
        velocity, reference, global, null,
        angular velocity, reference, global, null, 
        accelerations, yes;

    structural: 3, static,
        position, reference, global, null,
        orientation, reference, global, eye,
        velocity, reference, global, null,
        angular velocity, reference, global, null;

    abstract: 1, differential;
end: nodes;

begin: elements;
    body: 1, 1, 
        0.14,
        null,
        diag, 0.01, 0.02, 0.03;

    body: 2, 2, 
        0.14,
        null,
        diag, 0.01, 0.02, 0.03;

    joint: 1, deformable joint,
        1, position, reference, node, null,
           orientation, reference, node, eye,
        3, position, reference, node, null,
           orientation, reference, node, eye,
        octave, "MyConstLaw1", dimension, 6, 
            stiffness,
                sx,     0.,     0.,     0.,         0.,         0.,
                0.,     sy,     0.,     0.,         0.,         0.,
                0.,     0.,     sz,     0.,         0.,         0.,
                0.,     0.,     0.,     sPhix,      0.,         0.,
                0.,     0.,     0.,     0.,         sPhiy,      0.,
                0.,     0.,     0.,     0.,         0.,         sPhiz,
            damping,
                ks*sx,  0.,     0.,     0.,         0.,         0.,
                0.,     ks*sy,  0.,     0.,         0.,         0.,
                0.,     0.,     ks*sz,  0.,         0.,         0.,
                0.,     0.,     0.,     ks*sPhix,   0.,         0.,
                0.,     0.,     0.,     0.,         ks*sPhiy,   0.,
                0.,     0.,     0.,     0.,         0.,         ks*sPhiz;        
        
    genel: 1, mass, 1, abstract, algebraic, 0.14;

    genel: 2, spring support,
        1, abstract, algebraic,
        octave, "MyConstLaw1", dimension, 1,
        stiffness, sx,
        damping, ks * sx;

    joint: 2, deformable joint,
        2, position, reference, node, null,
           orientation, reference, node, eye,
        3, position, reference, node, null,
           orientation, reference, node, eye,
    linear viscoelastic generic,
        diag, sx, sy, sz, sPhix, sPhiy, sPhiz,
        proportional, ks;

    joint: 3, clamp, 3, node, node;

    force: 1, absolute, 1, position, reference, node, null, octave, "my_force", embed octave, yes;
    force: 2, absolute, 2, position, reference, node, null, octave, "my_force", embed octave, yes;
    force: 3, abstract, 1, abstract, octave, "my_force_x", embed octave, yes;
end: elements;
#} 
# END OF MBDYN SECTION

#/* BEGIN OF OCTAVE SECTION
printf("mboct: embed octave is enabled!\n");

function F = my_force(t)
    global f;
    global F0;
    global tau1;
    global tau2;
    F = (1 - exp(-t/tau1) ) * exp(-t/tau2) * F0 * [ sin(2*pi*f*t); 
               cos(2*pi*f*t); 
               0 ];
endfunction

function F = my_force_x(t)
    global f;
    global F0;
    global tau1;
    global tau2;
    F = (1 - exp(-t/tau1) ) * exp(-t/tau2) * F0 * sin(2*pi*f*t); 
endfunction

#*/ END OF OCTAVE SECTION
