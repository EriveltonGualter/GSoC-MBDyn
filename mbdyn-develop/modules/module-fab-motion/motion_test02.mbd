#
#	Motion transmission joint - test: rotation Z [radians] to rotation Z [radians]
#
#   Library of motion transmission components for "digital fabrication" machines (alpha version) [2013]
#   Eduardo Okabe (okabe@unicamp.br)
#   Postdoc CNPq at Aero/Polimi
#


begin: data;
	problem: initial value;
end: data;


begin: initial value;
	initial time: 0.;
	final time: 1.;
	time step: 1.e-3;

	tolerance: 1.e-12;
	max iterations: 20;
	
	output: iterations;
#	output: residual;
end: initial value;


begin: control data;
	loadable elements: 1;
	structural nodes: 3;
	rigid bodies: 2;
	joints: 3;
end: control data;


set: real r1 = 0.3;  # Radius of gear 1 [m]
set: real r2 = 0.1;  # Radius of gear 2 [m]
set: real w1 = 5.;   # Angular velocity of gear 1 [rad/s]

set: integer gear1 = 0;
set: integer gear2 = 1;

reference: gear1,
	reference, global, null,
	reference, global, eye,
	reference, global, null,
	reference, global, 0., 0., w1;

reference: gear2,
	reference, global, r1+r2, 0., 0.,
	reference, global, eye,
	reference, global, null,
	# Angular velocity of gear 2 calculated using gear ratio:
	reference, global, 0., 0., -r1*w1/r2;


begin: nodes;

   # reference node (no de referencia)
   structural: 0, dynamic, 
      null, 
      eye, 
      null, 
      null; 
   
    # node of gear 1 (no da engrenagem 1):
   structural: 1, dynamic, 
      null, 
      eye, 
      null, 
      reference, gear1, null;
   
   # node of gear 2 (no da engrenagem 2):
   structural: 2, dynamic, 
      reference, gear2, null, 
      eye, 
      null, 
      reference, gear2, null; 
      
end: nodes;


begin: elements;

   # In this simulation, reference node is clamped to the ground:
   joint: 1, clamp, 0, node, node;
 
   # This total joint constrains all dofs of gear 1, and impose a rotation speed (5 rad/s) to its z-axis:
   joint: 2,
      total joint,
         0,
            position, null,
         1,
            position, null,
         position constraint,
            active, active, active,
            null, 
         orientation constraint,
            active, active, angular velocity,
            component, 
               0., 0.,
               const, 5.;

   # Total joint contrains all dofs of gear 2, except its z-axis: 
   joint: 3,
      total joint,
         2,
            position, reference, gear2, null,
            rotation orientation, reference, gear2, eye,
         0,
            position, reference, gear2, null,
            rotation orientation, reference, gear2, eye,
         position constraint,
            active, active, active,
            null,
         orientation constraint,
            active, active, inactive,
            null;

   # Inertia properties of gear 1:  
   body: 0, 1,
      0.1,   # mass
      null, # relative center of mass
      diag, 0.01, 0.01, 0.01;  # inertia matrix
     
   # Inertia properties of gear 2:  
   body: 1, 2,
      0.1,   # mass
      null, # relative center of mass
      diag, 0.01, 0.01, 0.01;  # inertia matrix

	# Load "motion transmission joint" module:
	module load: "libmodule-fab-motion";

	# Motion transmission joint constrains node 1 (gear 1), node 2 (gear 2), node 0 (reference of nodes 1 and 2)
	# The transmissiond ratio can be supplied as a constant real number (itself) or
	# two constant real numbers (radius of gear 1 and radius of gear 2).
	# Motion transmission joint works differently from gear joint:
	# If the two gears are external the gear ratio should be "negative", otherwise it is "positive" (ex.: 
	# one internal and one external, planet and ring gear):  

	user defined: 1, motion transmission joint, 
	  angular, 1,    # node of gear 1 
      0,             # reference node 1
      angular, 2,    # node of gear 2 
      0,             # reference node 2
      ratio, -r2/r1, # gear ratio
      output, yes;   # enable output of constraint moments and actual angles

/*
	output of motion transmission joint (.usr):
	
	column  1:  	element label

	if node 1 is linear:
		columns 2-4:  	force on node 1
		columns 5-7:  	moment on node 1
		columns 8-10:  	force on reference node 1
		columns 11-13: 	moment on reference node 1
		j = 14;
    else:
		columns 2-4:  	moment on node 1
		columns 5-7: 	unwrapped relative rotation of node 1
		j = 8;

	if node 2 is linear:    
		columns j - j+2:  	force on node 2
		columns j+3 - j+5:  moment on node 2
		columns j+6 - j+8: 	force on reference node 2
		columns j+9 - j+11: moment on reference node 2	
    else:
		columns j - j+2:  	moment on node 2
		columns j+3 - j+5:  unwrapped relative rotation of node 2

*/

end: elements;

