# Copyright (C) 2007 Pierangelo Masarati <masarati@aero.polimi.it>
#
# This file can be freely used and modified to be run with MBDyn
# provided this copyright notice is not altered nor removed.
#
# THIS MODEL IS PROVIDED AS IS, WITHOUT ANY WARRANTY OF ACCURACY
# OR FITNESS FOR ANY PURPOSE

# MBDyn model of the CART -  Controls Advanced Research Turbine
# MBDyn >= 1.3.7
#
# Data taken from:
#
# September 2004 NREL/SR-500-32087
# Geometry and Structural Properties
# for the Controls Advanced Research Turbine (CART)
# from Model Tuning
#
# August 25, 2003-November 30, 2003
# K.A. Stol
# University of Auckland
# Auckland, New Zealand

begin: data;
  integrator: multistep;
end: data;

include: "cart.set";

begin: multistep;
  # abort after: input;

  initial time: 0.;
  final time: 60. ;
  time step: 1e-2;
  # time step: 1e-1;

  # tolerance: 1e-3;
  tolerance: 1e-0;
  max iterations: 40;

  derivatives tolerance: 2e-1;
  derivatives max iterations: 200;
  derivatives coefficient: 1.e-03;

  #linear solver: naive, colamd, mt, 1;
  linear solver: umfpack, cc;
  nonlinear solver: newton raphson, modified, 10;

  threads: disable;

  method: ms, .6;
  # method: bdf;

  #output: none;
  #output: iterations;
  #output: residual;
  #output: jacobian;
end: multistep;

# this file defines:
# - TOWER_NBEAM    the number of tower beam elements
# - TOWER_DAMP    the tower damping coefficient
include: "cart_tower_m.set";

# this file defines:
# - BLADE_NBEAM    the number of blade beam elements
# - BLADE_DAMP    the blade damping coefficient
include: "cart_blade_m.set";

# blades start vertical
set: Psi0 = 0.*deg2rad;
# blades start horizontal
# set: Psi0 = 90.*deg2rad;

set: Omega0 = 0.*2*pi;
set: Theta0 = 0.*deg2rad ; #
set: Vinf = 12.;
set: BLADE_DAMP = 1e-6;

#
#include: "cart_control.set";

begin: control data;

##output meter: meter, 0., forever, steps, 2 ;

  # print: equation description;
  # default output: none;
  structural nodes:
    +1    # ground
    +2*TOWER_NBEAM  # tower
    +1    # nacelle
    +1    # low speed shaft (LSS)
    +1    # teeter
    +2*(
      +1  # rigid blade
      +2*BLADE_NBEAM
    /*+17 # Dynamic Nodes for aerodynamic elements link*/
    )
  ;

  joints:
    +1    # ground clamp
    +2*(TOWER_NBEAM && 0)  # rigid tower (spherical + prismatic)
    +1    # nacelle yaw
    +1    # spring to retain yaw
    +1    # shaft rotation
    +1    # teeter
    +2*(
      +1  # blade pitch (total joint)
    /*+17 # Dynamic Nodes connection for aerodynamic elements link*/
    )
  ;

#-----------------------------------------------------------------------
  # INPUT for MBDyn: a generator torque is externally provided
  # through a dedicated model
  forces:
    +1    # generator
  ;
#-----------------------------------------------------------------------

  rigid bodies:
    +2*TOWER_NBEAM  # tower top
    +1    # nacelle
    +1    # shaft(s)
    +1    # teeter
    +2*(
      +1  # rigid blade
      +2*BLADE_NBEAM
    )
  ;

  beams:
    +TOWER_NBEAM
    +2*(
      +BLADE_NBEAM
    )
  ;

  gravity;

  air properties;
  rotors: 1;
  aerodynamic elements:
    +2*BLADE_NBEAM
  ;
/*
  loadable elements:
    +1    # aerodyn
  ;
*/
#-----------------------------------------------------------------------
#   MODIFIED FOR INTERACTION WITH CONTROLLER
#	file drivers:
#		+ CART_CONTROLLER_FILE_DRIVERS
#	;
#
#	output elements:
#		+ CART_CONTROLLER_OUTPUT_ELEMENTS
#	;
#-----------------------------------------------------------------------

  # print: all;
  print: dof stats;
end: control data;

# this file defines:
# all the required reference frames
# position of the (2) blades
include: "cart.ref";

begin: nodes;
  structural: GROUND, static,
    reference, GROUND, null,
    reference, GROUND, eye,
    reference, GROUND, null,
    reference, GROUND, null;

  # deformable tower nodes go here...
  include: "cart_tower_m.nod";

  structural: NACELLE, dynamic,
    reference, NACELLE_CG, null,
    reference, NACELLE_CG, eye,
    reference, NACELLE_CG, null,
    reference, NACELLE_CG, null;

  # deformable LSS shaft nodes go here...

  structural: LSS_END, dynamic,
    reference, LSS_END, null,
    reference, LSS_END, eye,
    reference, LSS_END, null,
    reference, LSS_END, null;

  structural: TEETER, dynamic,
    reference, TEETER, null,
    reference, TEETER, eye,
    reference, TEETER, null,
    reference, TEETER, null;

  # blade 1
  set: CURR_BLADE = BLADE_1;

  include: "cart_blade_m.nod";
/*
  include: "cart_ExtraDynamicNodes.nod";
*/
  # blade 2
  set: CURR_BLADE = BLADE_2;

  include: "cart_blade_m.nod";
/*
  include: "cart_ExtraDynamicNodes.nod";
*/
end: nodes;

#-----------------------------------------------------------------------
#begin: drivers;
#include: "cart_control.drv";
#end: drivers;
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
drive caller: BLADE_PITCH,
  ##const, -Theta0 ;
  ##cosine, 15., pi/20., 90.*deg2rad/2., half, -Theta0 ;  ### !!! CORRECT !!! P.Rix:12-06-2012
    array, 2,
      cosine, 0., pi/10., -40.*deg2rad/2., half, -Theta0, ### !!! CORRECT !!! P.Rix:12-06-2012
      cosine, 10., pi/20., 30.*deg2rad/2., half, 0.;
  ####file, 1, 1;    # MODIFIED FOR INTERACTION WITH CONTROLLER
#-----------------------------------------------------------------------

begin: elements;

  set: real Gravity = 9.81 ; #
  gravity: 0., 0., -1,
    #const, 9.81;
    cosine, 1., pi/.1, Gravity/2., half, 0.;

  # ground clamp
  joint: GROUND, clamp, GROUND, node, node;

  # deformable tower elements go here...
  include: "cart_tower_m.elm";

  # nacelle
  joint: NACELLE_YAW, revolute hinge,
    TOWER_TOP,
      reference, NACELLE_YAW, null,
      hinge, reference, NACELLE_YAW, eye,
    NACELLE,
      reference, NACELLE_YAW, null,
      hinge, reference, NACELLE_YAW, eye;
  joint: NACELLE_YAW + 1, deformable hinge,
    TOWER_TOP,
      hinge, reference, NACELLE_YAW, eye,
    NACELLE,
      hinge, reference, NACELLE_YAW, eye,
    linear viscoelastic isotropic, 1e8, 1e3;


  body: NACELLE, NACELLE,
    23228.0,
    reference, NACELLE_CG, null,
    diag, 1.01e3, 3.659e4, 3.659e4;

  # deformable LSS shaft elements go here...


  # shaft bearings
  joint: LSS_END_BEARINGS, revolute hinge,
    NACELLE,
      reference, LSS_END_BEARINGS, null,
      hinge, reference, LSS_END_BEARINGS, eye,
    LSS_END,
      reference, LSS_END_BEARINGS, null,
      hinge, reference, LSS_END_BEARINGS, eye;
#-----------------------------------------------------------------------
#   needs to be here because of the "element" drive caller...
  drive caller: GENERATOR_TORQUE,
    element, LSS_END_BEARINGS, joint, string, "wz",
      # linear, 0., 1.e4;
      parabolic, 0., 0., 1.e3;
    # file, 1, 3;  # MODIFIED FOR INTERACTION WITH CONTROLLER
#-----------------------------------------------------------------------

  # generator (driven to pass initial assembly with non-null Omega0...)
  # driven: GENERATOR_TORQUE, string, "Time > 0.",
  couple: GENERATOR_TORQUE, follower internal,
    NACELLE,
      position, reference, node, null,
    LSS_END,
      position, reference, node, null,
    reference, LSS_END_BEARINGS, 0., 0., 1.,
      reference, GENERATOR_TORQUE;

  # replace the above joint with a spherical hinge
  # and a deformable hinge for deformable bearings...
  # (better add an itermediate node connected to the shaft
  # by a revolute, and place a deformable displacement joint
  # or a spherical hinge, and a deformable hinge
  # to model bearing deformation)
  #

  body: LSS, LSS_END,
    condense, 2,
    # this is actually the HSS, which is assumed
    # to be rigidly attached to the LSS by the gearbox;
    # the mass and lateral inertia are included
    # in those of the nacelle
    0.,
    reference, LSS, null,
    diag, 34.4*43.165^2, 0., 0.,  # Ix * tau^2
    # hub yoke
    5885.,
    reference, TEETER, null,
    null;

### teeter pin
##joint: TEETER_PIN, revolute hinge,
##  LSS_END,
##    reference, TEETER_PIN, null,
##    hinge, reference, TEETER_PIN, eye,
##  TEETER,
##    reference, TEETER_PIN, null,
##    hinge, reference, TEETER_PIN, eye;

  # teeter pin
  joint: TEETER_PIN, total joint,
    LSS_END,
      position, reference, TEETER_PIN, null,
      position orientation, reference, TEETER_PIN, eye,
      rotation orientation, reference, TEETER_PIN, eye,
    TEETER,
      position, reference, TEETER_PIN, null,
      position orientation, reference, TEETER_PIN, eye,
      rotation orientation, reference, TEETER_PIN, eye,
    position constraint,
      active, active, active,
        null,
    orientation constraint,
      active, active, active,
        null;

  body: TEETER, TEETER,
    5852.,
    null,
    diag, 0., 1.5e4, 1.5e4;
#-----------------------------------------------------------------------
#   MODIFIED FOR INTERACTION WITH CONTROLLER
#   this data can be used as an external input as a source of disturbance
#   for the model

    set: real RhoAir = 1.225; # kg/m^3
      # aerodynamic stuff
        air properties: RhoAir, 340.,
      -1., 0., 0.,
      cosine, 0., pi/20., 0.5*10., half, 0.;
  ### const, Vinf;
  ### file, 1, 2, amplitude, Vinf;  # MODIFIED FOR INTERACTION WITH CONTROLLER
#-    array, 3, # ramp, slope, initial time, final time, initial value
#-      ramp, 3./4.,  1., 5., 0.,
#-      ramp, 5./5.,  5.,10., 0.,
#-      ramp, 4./5., 10.,15., 0.;
  ##null,
  ##gust, logarithmic,
  ##  reference orientation,
  ##    3, 0., 0., 1.,
  ##    1, -1., 0., 0.,  # wind goes in this direction
  ##  reference elevation, 80.,
  ##  reference velocity,
  ##    cosine, 0., pi/10., Vinf/2., half, 0.,
  ##  surface roughness length, .25;

  #-----------------------------------------------------------------------

  rotor: ROTOR,
    NACELLE,
      hinge, reference, TEETER, eye,
    TEETER,
    induced velocity,
      uniform, Omega, BLADE_R,
      delay, .99,
      tolerance, 1e-3,
      max iterations, 20;

# ================================================= #

  # blade 1
  set: CURR_BLADE = BLADE_1;

  # blade pitch
  include: "cart_blade_root.elm";

  # blade structural elements
  include: "cart_blade_m.elm";
/*
  # blade aerodynamic elements (AERODYN)
  include: "cart_ExtraDynamicNodes.elm";
*/
  # blade aerodynamic elements (MBDYN)
  include: "cart_blade_aero_m.elm";

# ================================================= #

  # blade 2
  set: CURR_BLADE = BLADE_2;

  # blade pitch
  include: "cart_blade_root.elm";

  # blade structural elements
  include: "cart_blade_m.elm";
/*
  # blade aerodynamic elements (AERODYN)
  include: "cart_ExtraDynamicNodes.elm";
*/
  # blade aerodynamic elements (MBDYN)
  include: "cart_blade_aero_m.elm";

/*
  # load user defined element (AERODYN)
  include: "cart0_ExtraDynamicNodes.aerodyn";
*/

#-----------------------------------------------------------------------
#   MODIFIED FOR INTERACTION WITH CONTROLLER
#	include: "cart_control.elm";
#-----------------------------------------------------------------------
end: elements;

# vim:ft=mbd
