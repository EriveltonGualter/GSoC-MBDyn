/*
 *               ||
 *  /|           \/          |/
 *  /|>o----o----o----o----o<|/
 *  /|                       |/
 *
 *
 *     4    10   6    9    3
 *     o----o----o----o----o
 *     |    |    |    |    |
 *     o----o----o----o----o
 *     1    7    5    8    2
*/

begin: data;
	problem: initial value;
end: data;

set: const real E = 7.0e+10;
set: const real NU = 3.0e-01;

set: real G = E/(2*(1 + NU));

set: real PRESTRESS = 1e6;

/*
 * the model is defined on reference frame REF
 */
set: const integer REF = 1;
reference: REF,
        reference, global, 0., 0., 0.,
        reference, global, 1, 1., 0., 0., 3, 0., 0., 1.,
        # reference, global, 1, 1., 1., 1., 3, -1., -1., 1.,
        reference, global, null,
        reference, global, null;

begin: initial value;
	initial time: 0.;
	time step: 0.25;
	final time: 2.e3;

	tolerance: 1e-6;
	max iterations: 10;

	threads: disable;

	method: ms, .6;
	# linear solver: umfpack, cc;
	linear solver: naive, colamd;

	output: iterations;
	# output: residual;
	# output: jacobian;
end: initial value;

begin: control data;
	structural nodes:
		+ 4	# structural
		+ 6	# structural displacement
	;
	joints:
		+ 4	# clamps
	;
	plates:
		+ 4
	;
	loadable elements: 1 + 2;
	default orientation: orientation vector;
end: control data;

begin: nodes;
	structural: 1, static ,
		reference, REF, 0., 0., 0.,
		reference, REF, eye,
		reference, REF, null,
		reference, REF, null;

	structural: 2, static ,
		reference, REF, 2., 0., 0.,
		reference, REF, eye,
		reference, REF, null,
		reference, REF, null;

	structural: 3, static ,
		reference, REF, 2., 1., 0.,
		reference, REF, eye,
		reference, REF, null,
		reference, REF, null;

	structural: 4, static ,
		reference, REF, 0., 1., 0.,
		reference, REF, eye,
		reference, REF, null,
		reference, REF, null;

	structural: 5, static displacement,
		reference, REF, 1., 0., 0.,
		reference, REF, null;
	structural: 6, static displacement,
		reference, REF, 1., 1., 0.,
		reference, REF, null;

	structural: 7, static displacement,
		reference, REF, 0.5, 0., 0.,
		reference, REF, null;
	structural: 8, static displacement,
		reference, REF, 1.5, 0., 0.,
		reference, REF, null;
	structural: 9, static displacement,
		reference, REF, 1.5, 1., 0.,
		reference, REF, null;
	structural: 10, static displacement,
		reference, REF, 0.5, 1., 0.,
		reference, REF, null;

end: nodes;

begin: elements;

	joint: 1, clamp, 1, node, node;
	joint: 2, clamp, 2, node, node;
	joint: 3, clamp, 3, node, node;
	joint: 4, clamp, 4, node, node;

	membrane4eas: 1,
		1, 7, 10, 4,
		isotropic, E, E, nu, NU, thickness, 1.0e-03,
		prestress, PRESTRESS, 0., 0.; # , 0., 0., 0., 0., 0., 0., 0., 0., 0.
	membrane4eas: 2,
		7, 5, 6, 10,
		isotropic, E, E, nu, NU, thickness, 1.0e-03,
		prestress, PRESTRESS, 0., 0.; # , 0., 0., 0., 0., 0., 0., 0., 0., 0.
	membrane4eas: 3,
		5, 8, 9, 6,
		isotropic, E, E, nu, NU, thickness, 1.0e-03,
		prestress, PRESTRESS, 0., 0.; # , 0., 0., 0., 0., 0., 0., 0., 0., 0.
	membrane4eas: 4,
		8, 2, 3, 9,
		isotropic, E, E, nu, NU, thickness, 1.0e-03,
		prestress, PRESTRESS, 0., 0.; # , 0., 0., 0., 0., 0., 0., 0., 0., 0.

	module load: "./libmodule-loadinc.so";

	user defined: 0, load increment normalization,
		help,
		max load, 1e6,
		compliance, 1.e-0,
		reference length, 0.,
		# cosine, 0., pi/1., 1e1, half, 0.;
		const, 10.;
	user defined: 5, load increment force,
		help,
		force, absolute,
		5,
		0., 0., .5,
		load increment normalization, 0;
	user defined: 6, load increment force,
		help,
		force, absolute,
		6,
		0., 0., .5,
		load increment normalization, 0;
end: elements;

# vim:ft=mbd
