# $Header$

begin: data;
	problem: initial value;
end: data;

begin: initial value;
	initial time: 0.;
	final time: 1.;
	time step: 1.e-2;
end: initial value;

begin: control data;
	abstract nodes: 2;
	genels: 2;
	forces: 2;
end: control data;

begin: nodes;
	abstract: 1;
	abstract: 2;
end: nodes;

scalar function: "test", const, 1.;

module load: "libmodule-drive-test";
drive caller: 0, drive test, sine, 0., 2*pi, 1., forever, 0., "drivetest.dat", 0., 10., 1.e-2;
remark: "test", model::drive(0, 0.);
drive caller: 1, drive test, sine, 0., 2*pi, 1., forever, 0., "drivetest2.dat", 0., 10., 1.e-2;
remark: "test derivative", model::drivep(1, 0.);

begin: elements;
	genel: 1, spring support,
		1, abstract, algebraic,
		linear elastic, 1.;
	force: 1, abstract,
		1, abstract,
		drive,
			string, "(Var>0.)*Var",
			sine, 0., 2*pi/.2, 10., forever, 0.;

	genel: 2, spring support,
		2, abstract, algebraic,
		linear elastic, 1.;
	set: real v;
	force: 2, abstract,
		2, abstract,
		# string, "v=sin(5.*2*pi*Time);10.*v*(v>0.)";
		/*
		fourier series,
			.1,			# initial time
			3.*2*pi,		# omega
			2,			# truncation
				3.,		# a_0
				.5, 0.,		# a_1, b_1
				0., .2,		# a_2, b_2
			forever,		# number of cycles
			5.;			# initial value
		*/
		scalar function, "test";
end: elements;
