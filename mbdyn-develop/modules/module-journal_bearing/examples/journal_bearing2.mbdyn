/* 
 * MBDyn (C) is a multibody analysis code. 
 * http://www.mbdyn.org
 *
 * Copyright (C) 1996-2013
 *
 * Pierangelo Masarati	<masarati@aero.polimi.it>
 * Paolo Mantegazza	<mantegazza@aero.polimi.it>
 *
 * Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
 * via La Masa, 34 - 20156 Milano, Italy
 * http://www.aero.polimi.it
 *
 * Changing this copyright notice is forbidden.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation (version 2 of the License).
 * 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 AUTHOR: Reinhard Resch <r.resch@secop.com>
        Copyright (C) 2013(-2013) all rights reserved.

        The copyright of this code is transferred
        to Pierangelo Masarati and Paolo Mantegazza
        for use in the software MBDyn as described
        in the GNU Public License version 2.1
*/

set: real X0 = 20e-3;
set: real Y0 = 30e-3;
set: real Z0 = -15e-3;
set: real l = 30e-3;
set: real muc = 0.1;
set: real mus = 0.1;

set: real sigma0 = 1e4;
set: real sigma1 = 1e1;
set: real d = 20e-3;
set: real m = 10.;
set: real J11 = 1e-3;
set: real J22 = 1e-3;
set: real J33 = 2e-3;
set: real g = 9.81;

set: real gravity_Zeta = -pi/2.;
set: real gravity_Psi = 30 * pi / 180.*0;

set: real theta_y = 70*pi/180*0;
set: real theta_z = 90*pi/180*0;

set: real omega1 = 2 * pi * 15.;

set: real vs = 0.5 * d * omega1;
set: real a = 1.;

set: integer node_id_shaft = 1001;
set: integer node_id_ground = 1002;
set: integer node_id_shaft_rel = 1003;
set: integer prm_node_id_lambda1 = 1004;
set: integer prm_node_id_lambda2 = 1005;
set: integer body_id_slider = 2001;
set: integer joint_id_ground = 3001;
set: integer joint_id_journal = 3002;
set: integer joint_id_thrust = 3003;
set: integer ref_id_journal = 4001;

begin: data;
	problem: initial value;	# the default
end: data;

begin: initial value;
	initial time: 0.;
	final time: 1;
	time step: 1e-4;
    min time step: 1e-6;
    max time step: 1e-4;
	max iterations: 10;
	strategy: factor, 0.8, 1, 1.25, 1, 3, 6;
	tolerance: 1e-8;

	max iterations: 100;
    method: ms, 0.9;
    derivatives tolerance: 1e-5;
    derivatives max iterations: 100;
	derivatives coefficient: 1e-6;
    #output: residual;
    #output: solution;
    #output: jacobian;
    #output: iterations;
    linear solver: umfpack, colamd, scale, row max column max, always, max iterations, 10;
    nonlinear solver: line search, 
            abort at lambda min, no, 
            scale newton step, no, 
            lambda min, 1e-2,
            verbose, no,
            print convergence info, no,
            divergence check, yes, factor, 10.;
    #abort after: assembly;
    #abort after: derivatives;
end: initial value;

begin: control data;
    default output: all;
	structural nodes: 3;
    parameter nodes: 2;
    rigid bodies: 1;
    loadable elements: 2;
    joints: 2;
	max iterations: 100;
	tolerance: 1e-8;
	gravity;
	#~ print: dof stats;
	#~ print: equation description;
	#~ print: dof description;
	#~ print: element connection;
	#~ print: node connection;	
    use: loadable elements, in assembly;
    print: all, to file;
end: control data;

reference: ref_id_journal,
    position, reference, global, X0, Y0, Z0,
    orientation, reference, global, matr, 	cos(theta_y) * cos(theta_z),	-sin(theta_z),	sin(theta_y) * cos(theta_z),
								            cos(theta_y) * sin(theta_z),	 cos(theta_z),	sin(theta_y) * sin(theta_z),
								            -sin(theta_y),		 	 			 	   0.,					cos(theta_y),
    velocity,         reference, global, null,
    angular velocity, reference, global, null;

reference: ref_id_journal + 1,
    position, reference, ref_id_journal, l, 0., 0.,
    orientation, reference, ref_id_journal, eye,
    velocity, reference, ref_id_journal, null,
    angular velocity, reference, ref_id_journal, null;

begin: nodes;

structural: node_id_shaft, dynamic,
    position, reference, ref_id_journal, 15e-3, 17e-3*0, -15e-3*0,
	orientation, reference, ref_id_journal, euler123, 45*pi/180*0, -60*pi/180*0, 30*pi/180*0,
	velocity, reference, ref_id_journal, null,
	angular velocity, reference, ref_id_journal, omega1, 0., 0.;

structural: node_id_ground, static,
    position, reference, global, -15e-3, 56e-3, -10e-3,
	orientation, reference, global, euler123, 45*pi/180, -60*pi/180, 30*pi/180,
	velocity, reference, global, null,
	angular velocity, reference, global, null;

structural: node_id_shaft_rel, dummy,
    node_id_shaft, relative frame, node_id_ground,
        position, reference, ref_id_journal, null,
        orientation, reference, ref_id_journal, eye;

parameter: prm_node_id_lambda1, element;
parameter: prm_node_id_lambda2, element;

end: nodes;

begin: elements;

	body: body_id_slider,
		# node
		node_id_shaft,
		# mass
		m,
		# relative center of mass
		reference, node, null,
		# inertia matrix
		diag, J11, J22, J33,
		inertial, reference, node, eye;

    joint: joint_id_ground, clamp, node_id_ground, node, node;

    joint: joint_id_thrust, total pin joint,
        node_id_shaft,
            position, reference, ref_id_journal, null,
            position orientation, reference, ref_id_journal, eye,
            rotation orientation, reference, ref_id_journal, eye,
        position, reference, ref_id_journal, null,
        position orientation, reference, ref_id_journal, eye,
        rotation orientation, reference, ref_id_journal, eye,
        position constraint,
            active,
            inactive,
            inactive,
            component,
                null,
                null,
                null,
        orientation constraint,
            inactive,
            inactive,
            inactive,
            component,
                null,
                null,
                null;
                
    user defined: joint_id_journal, 
        journal bearing,
        node1,
            node_id_ground,
            offset, reference, ref_id_journal, null,
            orientation, reference, ref_id_journal, eye,
        node2,
            node_id_shaft,
            offset, reference, ref_id_journal, null,
        friction,
            diameter, d,
            coulomb friction coefficient, muc,
            static friction coefficient, mus,
            micro stick stiffness, sigma0,
            micro stick damping, sigma1,
            sliding velocity coefficient, vs,
            sliding velocity exponent, a;

    user defined: joint_id_journal + 1, 
        journal bearing,
        node1,
            node_id_ground,
            offset, reference, ref_id_journal + 1, null,
            orientation, reference, ref_id_journal + 1, eye,
        node2,
            node_id_shaft,
            offset, reference, ref_id_journal + 1, null,
        friction,
            diameter, d,
            coulomb friction coefficient, muc,
            static friction coefficient, mus,
            micro stick stiffness, sigma0,
            micro stick damping, sigma1,
            sliding velocity coefficient, vs,
            sliding velocity exponent, a;

    bind: joint_id_journal, user defined, prm_node_id_lambda1, string, "lambda1";
    bind: joint_id_journal, user defined, prm_node_id_lambda2, string, "lambda2";

	gravity: cos(gravity_Zeta) * cos(gravity_Psi), 
             cos(gravity_Zeta) * sin(gravity_Psi), 
             sin(gravity_Zeta),
	const, g;		
end: elements;

