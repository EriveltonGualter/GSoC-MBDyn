# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2017
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# $Header$

#
# Copyright (C) 1996-2017
#
# Pierangelo Masarati <pierangelo.masarati@polimi.it>
#
# Sponsored by Hutchinson CdR, 2018-2019
#

/*
 
 \|       /\ k     m
 \o---+  /  \  +---o --> x, f
 \|    \/    \/


 - output a set of measures
 - make sure the response is "harmonic"
 - change the excitation frequency (and possibly amplitude) and the time step

*/


begin: data;
	problem: initial value;
end: data;

begin: initial value;
	initial time: 0.;
	final time: forever;
	time step: 1.e-3;

	# the time step will be passed from outside
	set: const integer TIMESTEP_DRIVE = 99;
	strategy: change, postponed, TIMESTEP_DRIVE;
	

	tolerance: 1e-9;
	max iterations: 10;

	derivatives tolerance: 1e19;
	derivatives max iterations: 10;
	derivatives coefficient: 1e-12;

	method: ms, .6;

	output: iterations;
	# output: residual;
end: initial value;

begin: control data;
	structural nodes:
		+1	# ground
		+1	# body
	;
	joints:
		+1	# clamp
		+1	# total joint
		+1	# spring-damper
	;
	rigid bodies: 1;
	forces: 1;

	#file drivers: 1;
	#output elements: 1;
	loadable elements: 1;

	output results: netcdf;

	# tolerance: 1e-2;
	# max iterations: 10;
end: control data;

reference: 0,
	reference, global, null,
	reference, global, eye,
	reference, global, null,
	reference, global, null;

begin: nodes;
	structural: 0, static,
		reference, 0, null,
		reference, 0, eye,
		reference, 0, null,
		reference, 0, null;
	structural: 2, dynamic,
		reference, 0, 1., 0., 0.,
		reference, 0, eye,
		reference, 0, null,
		reference, 0, null;
end: nodes;

begin: elements;
	joint: 0, total pin joint,
		0,
			position, reference, 0, null,
			position orientation, reference, 0, eye,
			rotation orientation, reference, 0, eye,
		# ground
			position, reference, 0, null,
			position orientation, reference, 0, eye,
			rotation orientation, reference, 0, eye,
		position constraint, 1, 1, 1, null,
		orientation constraint, 1, 1, 1, null;

	joint: 2, total joint,
		2,
			position, reference, 0, null,
			position orientation, reference, 0, eye,
			rotation orientation, reference, 0, eye,
		0,
			position, reference, 0, null,
			position orientation, reference, 0, eye,
			rotation orientation, reference, 0, eye,
		position constraint, 0, 1, 1, null,
		orientation constraint, 1, 1, 1, null;

	set: const real omega = 10.*2*pi;
	set: const real xi = .1;
	set: const real M = 1.;
	set: const real K = M*omega^2;
	set: const real C = M*2*xi*omega;

	body: 2, 2,
		M,
		null,
		null;

	joint: 12, rod,
		2,
			position, reference, node, null,
		0, 
			position, reference, node, null,
		from nodes,
		linear viscoelastic, K, C;

	/*
	stream output: 0,
		stream name, "MBSKOU",
		create, yes,
		path, "$MBSKOU",
		# port, 8005,
		no signal,
		# nonblocking,
		echo, "output.echo",
		values, 3,
			drive, time,
			drive, node, 2, structural, string, "X[1]", direct,
			drive, node, 2, structural, string, "XP[1]", direct;
	*/
	user defined: 99, harmonic excitation,
		inputs number, 2,
			node, 2, structural, string, "X[1]", direct,
				# output, no,
				# test, no,
			node, 2, structural, string, "XP[1]", direct,
				# test, no,
		output format, magnitude phase,
		steps number, 128,
		initial angular frequency, 2.*2*pi,
			max angular frequency, 25.*2*pi, # otherwise forever (or until max time)
			angular frequency increment,
				# additive, 0.25*2*pi,
				multiplicative, 1.06,
				# custom, 4.*2*pi, 6.*2*pi, 8.*2*pi, 10.*2*pi, 15.*2*pi, 20.*2*pi, 30.*2*pi, 50.*2*pi, last,
		# initial time, 5., # defaults to "always"
		tolerance, 1.e-8,
		min periods, 2,
		max periods, 50,
			# no convergence strategy, abort,
		timestep drive label, TIMESTEP_DRIVE;

	output: loadable, 99;

	# use the (optional) "timestep drive label" instead
	# drive caller: TIMESTEP_DRIVE, element, 99, loadable, string, "timestep", direct;

	# force from outside
	force: 2, absolute,
		2,
			position, reference, node, null,
		1., 0., 0.,
			element, 99, loadable, string, "excitation", linear, 0., 1.;
/*
	force: 2, absolute,
		2,
			position, reference, node, null,
		component,
			element, 99, loadable, string, "psi", string, "100.*sin(Var)",
			element, 99, loadable, string, "psi", string, "50.*sin(Var - pi/2)",
			const, 0.;
*/
end: elements;

# vim:ft=mbd
