# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2017
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# $Header$
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# Author: Reinhard Resch <r.resch@secop.com>
set: integer node_id_rotor 				= 1001;
set: integer node_id_stator				= 1002;
set: integer node_id_motor_torque			= 1003;
set: integer node_id_motor_omega_derivative	= 1005;

set: integer body_id_rotor 		  		= 2001;
set: integer body_id_stator 				= 2002;

set: integer joint_id_revolute_rotation 		= 3001;
set: integer joint_id_clamp 				= 3002;
set: integer joint_id_bearing_friction			= 3003;
set: integer elem_id_motor				= 4001;

set: integer ref_id_stator 					= 5001;

set: real rotor_momentum_of_inertia = 0.0001533;

##########################################
# Asynchronmotor
##########################################

# p ... Polpaarzahl
set: real motor_p = 1.;                                  

# f ... Netzfrequenz
set: real motor_f = 50.;                          

# MA ... Anzugsmoment       
set: real motor_MA = 0.148214577;                       

# MK ... Kippmoment
set: real motor_MK = 0.457;                       

# sense ... Drehrichtung
set: real motor_sense = -1.;

set: real motor_MK_MN = 2.5;

# omegaS ... Synchrondrehzahl
set: real motor_OmegaS = motor_sense * 2. * pi * motor_f / motor_p; 

# sK ... Kippschlupf  
set: real motor_sK = motor_MK / motor_MA - sqrt( ( motor_MK / motor_MA )^2 - 1. );  

set: real motor_MN = motor_MK / motor_MK_MN;

set: real motor_sN = - ( sqrt(motor_MK^2 - motor_MN^2) - motor_MK ) / motor_MN * motor_sK;

set: real motor_omegaN = motor_OmegaS * ( 1 - motor_sN );

set: real motor_PN = motor_omegaN * motor_MN;

set: real motor_MA_MN = motor_MA / motor_MN;

set: real motor_viscos_friction_coeff = 0.0015;

set: real omega0 = 0;

set: real initial_time = 0;
set: real final_time = 4;
set: real motor_t0 = 0;
set: real motor_t1 = 2;
set: real time_step = 1e-3;

set: real motor_torque_derivative0 = 0;
set: real motor_torque0 = 0;

begin: data;
	problem: initial value; # the default
end: data;

begin: initial value;
	initial time: initial_time;
	final time: final_time;
	time step: time_step;
	min time step: time_step/1e3;
	max time step: time_step;

	strategy: factor, 0.5, 3, 2, 3, 15, 20;
	max iterations: 1000;
	derivatives max iterations: 300;
	derivatives tolerance: 1e-6;
	tolerance: 1e-6;
	linear solver: naive,colamd,mt,1;
	threads: assembly, 1;
	nonlinear solver: newton raphson;
	output: messages;
        derivatives tolerance: 1e-6;
        derivatives max iterations: 1000;
        derivatives coefficient: 1e-6;	
	#~ output: residual;
	#~ output: jacobian;
	

end: initial value;

begin: control data;

	structural nodes: 2;
	parameter nodes: 2;
	rigid bodies: 2;
	joints: 3;
	forces: 0;
	loadable elements: 1;
	#~ skip initial joint assembly;
	#~ print: dof stats;
	#~ print: equation description;
	#~ print: dof description;
	#~ print: element connection;
	print: node connection;	
	#~ make restart file;
end: control data;

#FIXME: cannot load user defined modules at runtime on cygwin!
#module load: "libmodule-asynchronous_machine"; # uncomment when using run-time module

reference: ref_id_stator,
	reference, global, null,
	#~ reference, global, euler123, 0.*pi/180.,0.*pi/180.,0*pi/180.,
	reference, global, eye,
	reference, global, null,
	reference, global, null;

begin: nodes;
	structural: node_id_rotor, dynamic,
		# position
		reference, ref_id_stator, null,
		# orientation
		reference, ref_id_stator, eye,
		# velocity
		reference, ref_id_stator, null,
		# angular velocity
		reference, ref_id_stator, 0.,0.,omega0,
		accelerations, yes;
				
	structural: node_id_stator, dynamic,
		# position
		reference, ref_id_stator, null,
		# orientation
		reference, ref_id_stator, eye,
		# velocity
		reference, ref_id_stator, null,
		# angular velocity
		reference, ref_id_stator, null,
		accelerations, yes;
		
	parameter: node_id_motor_torque, element;
	
	parameter: node_id_motor_omega_derivative, element;
end: nodes;

begin: elements;
	body: body_id_rotor, node_id_rotor, 
		# mass
		1.,
		# center of mass
		null,
		# inertia matrix
		diag,0.,0.,rotor_momentum_of_inertia;
		
	body: body_id_stator, node_id_stator,
		1,
		null,
		eye;
		
	joint: joint_id_revolute_rotation, revolute hinge,
		node_id_stator,
			position, reference, node, null,
			orientation, reference, node, eye,
		node_id_rotor,
			position, reference, node, null,
			orientation, reference, node, eye;

	joint: joint_id_clamp, clamp, node_id_stator, 
		position,node, 
		orientation,node;
		
	driven: elem_id_motor, string, "( Time >= motor_t0 ) * ( Time < motor_t1 )",
	user defined: elem_id_motor, asynchronous_machine,
		rotor, node_id_rotor,					
		stator, node_id_stator, 
		MK, motor_MK,
		sK, motor_sK,
		OmegaS, const, motor_OmegaS,
		M0, motor_torque0,
		MP0, motor_torque_derivative0;
		
	joint: joint_id_bearing_friction, deformable joint,
		node_id_rotor, null,
		node_id_stator, null,
		linear viscous generic,
			diag,0,0,0,0,0,motor_viscos_friction_coeff;
			
	#~ drive caller: drive_id_torque, element, elem_id_motor, user defined, index, 1, direct;
	#~ bind: elem_id_motor,user defined,node_id_motor_torque,index, 1;
	bind: elem_id_motor, user defined, node_id_motor_torque, string,"M";
	
	bind: elem_id_motor, user defined, node_id_motor_omega_derivative, string, "omegaP";
	#~ bind: elem_id_motor, user defined, node_id_motor_omega_derivative, index, 5;
end: elements;
