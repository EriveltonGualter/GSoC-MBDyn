$Header$

MBDyn (C) is a multibody analysis code. 
http://www.mbdyn.org

Copyright (C) 1996-2017

Pierangelo Masarati	<masarati@aero.polimi.it>
Paolo Mantegazza	<mantegazza@aero.polimi.it>

Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
via La Masa, 34 - 20156 Milano, Italy
http://www.aero.polimi.it

Changing this copyright notice is forbidden.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation (version 2 of the License).


This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA



Among the authors:

Prof. Paolo Mantegazza initiated the work on the F77 version of the code,
	which was a sort of proof-of-concept implementation.

Prof. Massimiliano Lanz worked on the initial, F77 version, called MBDin;
	he had an important role in adding the flexible elements, both
	beams and modal bodies. He also worked on the implementation of
	free wake aerodynamics, based on the code NUVOLA.

Prof. Gian Luca Ghiringhelli also worked on the F77 version, at the modal
	bodies and the piezoelectric beams.  He is working at present
	at the integration of landing gear stuff in the current version.
	He also contributed in adding the hydraulic part of the code.

Dr. Giampiero Bindolino had an important role in interfacing the initial
	F77 version with free wake aerodynamics.  He is also contributing
	his continuous support to the current version.



Many students had a part in developing the code:

Dr. Gabriele Gilardi worked on the initial code as a PhD student, but I don't
	known what his exact contribution was.

Andrea Colferai worked at the modal body implementation in the F77 version.

Stefano Marazzani worked as an undergrad student at the beam, rotor 
	and aerodynamic elements in the F77 version of the code.

Pierangelo Masarati (me!) worked as an undergraduate student at developing
	the control-related genels and at the piezoelectric beam elements.
	Then, as a PhD student, I entirely reengineered the program, by
	rewriting it in C++/C/F77, and added many control-related features.
	Now, as Assistant Professor, I'm maintaining the code and leading
	the development team.

Felice Felippone, as an undergraduate student, implemented the modal body 
	back in the new version of the code.

Lamberto Puggelli, another undergrad, implemented the hydraulic library

Giuseppe Quaranta, (Beppe), as an undergrad, did a very good job in 
	parallelizing the code adding a Schur domain decomposition solver
	and incorporating Metis as a partitioning tool, all under the
	MPI umbrella.  While Ph.D. student, he worked on the integration
	with sophisticated aerodynamics, including wake modeling and CFD,
	on matrix-free nonlinear solvers, periodic stability analysis
	by means of transient response analysis and system identification,
	and more.  Now, as a Post Doc., he is a stable member of the team.

Leonardo Cassan, undergrad, worked at the ADAMS2MBDyn project,
	a translator from ADAMS models in adm format into MBDyn raw input
	files.  You can find what's available in contrib/a2m
	(essentially abandoned).

Marco Morandini, Ph.D., worked on sophisticated flexible bodies (beams),
	on visualization issues, friction modeling for all joints,
	third-order solver, and more.  He's currently working at
	automatic differentiation within the ANTASME project.
	Now, as a Post Doc., he is a stable member of the team.

Stefania Gualdi, Post Doc., is working on tire and landing gear analysis,
	and (semi-)active control.

Michele Attolico, while Ph.D. student, integrated RTAI 
	to allow hard and user-space real-time simulations, and
	worked on real-time applications and improvements.

Matteo Martegani, while graduate student, worked on
	the remote real-time simulation with RTAI and RTNET
	(http://www.aero.polimi.it/~mbdyn/mbdyn-rt/).

Patrick Rix, as an independent user, is contributing to the NetCDF
	output and to wind-turbine modeling aspects.

Alessandro Fumagalli, as Ph.D. student, is working on different 
	formulation and implementation aspects related to robotics.
	He implemented the total joint family and is currently working
	at the inverse dynamics problem module.

Mattia Mattaboni, as Ph.D. student, developed the Artificial Neural
	Network library

Luca Cavagna, as Ph.D. student, is working at interfacing MBDyn
	with external CFD solvers (FOI's EDGE right now).

Michele Frumusa, as an undergrad, worked at interfacing MBDyn with FEA
	software for detailed stress analysis from dynamics of coarse models.

Tommaso Solcia, as an undergrad, is interfacing MBDyn with Scicos.

Mauro Manetti, as Ph.D. student, developed the screw joint.

Riccardo Vescovini, as Ph.D. student, is developing the shell element.

Reinhard Resch, as an independent user, provided selected improvements,
	mainly user-defined elements for special features.

Louis Gagnon, as an independent user, developed the wheel4 module
	during a stage at Politecnico di Milano

Andrea Zanoni, as an undergrad, contributed to inverse dynamics
	of underdetermined systems and muscle modeling

Matteo Fancello, as an undergrad, contributed the continuous contact module
	and is currently integrating MBDyn with INRIA's Siconos

Eduardo Okabe, as visiting professor, contributed the fab* modules
	about gears, lubricated bearings, and other improvements

Ankit Aggarwal contributed to the mathematical expression evaluation code
	developed within Google Summer of Code 2015

Luca Conti developed the FlightGear interface module, along with
	significant refactoring of the communication code,
	within Google Summer of Code 2017

Other undergrads might have had a role in the F77 version of the code, 
that I'm not aware of.

Paolo Mantegazza is the project emeritus leader ;),
and Pierangelo Masarati (me!) is the main developer and the maintainer.

Pierangelo Masarati.

