#beginpreprocess
from MBDynLib import *
#endpreprocess

begin: data;
        problem: initial value;
end: data;

include: "include1.dat"


begin: control data;
        structural nodes:
		(NX + 1) * (NY + 1) 
		+ 1
	;
        beams:
		NY
	;
        plates:
		NX * NY
	;
        joints:
		NY + 1 + 2 + 1 + 1
	;
	rigid bodies: 
		NX * NY * 4
		+ 2 * NY
	;
	print: dof description;
end: control data;


include: "include2.dat"
begin: elements;
#beginpreprocess
[print(d) for d in bodies]
[print(d) for d in joints]
#endpreprocess
joint: JDX + NY + 1, revolute pin, 
	JDX + 1,
		position, reference, node, null,
		orientation, 1, 1., 0., 0., 2, 0., 0., 1.,
	position, L - Lc, 0.0, -L1,
	orientation, 1, 1., 0., 0., 2, 0., 0., 1.;
/*
joint: JDX + NY + 2, revolute hinge, 
	JDX, 
		position, reference, node, null,
		orientation, reference, node, eye,
	JDX + 1,
		position, reference, node, Lc, 0., 0.,
		orientation, reference, node, eye;
*/
joint: JDX + NY + 3, distance, 
	JDX + 1, 
		position, reference, node, Lc, 0., 0.,
	IDX + (NY + 1) * NX,
		position, reference, node, null,
	const, L1;

joint: JDX + NY + 4, angular velocity, 
	JDX + 1, 
		reference, node, 0., 1., 0.,
		const, Omega;

joint: JDX + NY + 5, in plane, 
	JDX + 1, 
		position, reference, node, null,
		0., 1., 0.,
	IDX + (NY + 1) * NX,
		offset, reference, node, null;

#beginpreprocess
[print(d) for d in shells]
[print(d) for d in beams]
#endpreprocess
end: elements;
