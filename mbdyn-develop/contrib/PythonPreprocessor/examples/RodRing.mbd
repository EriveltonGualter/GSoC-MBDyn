# $Header:
# /var/cvs/mbdyn/mbdyn/mbdyn-1.0/contrib/PythonPreprocessor/examples/RodRing.mbd,v 1.0
# 2018/01/10 11:14:27 zanoni Exp $
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2018
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# Author: Andrea Zanoni <andrea.zanoni@polimi.it>>

begin: data;
  problem: initial value;
end:data;

begin: initial value;
  initial time: 0.;
  final time: 10.;
  time step: 1e-3;

  method: ms, 0.6;
    tolerance: 1e-6;
    max iterations: 10;
    derivatives tolerance: 1e6;

  linear solver: naive, colamd;
    output: iterations;

  threads: 1;
  # output: residual;
end: initial value;

#beginpreprocess
from __future__ import print_function, division
from MBDynLib import *
from math import pi

ConstMBVar('R', 'real', 0.3)
ConstMBVar('N', 'integer', 100)

for i in range(N):
  ConstMBVar('NODE_' + str(i), 'integer', i)
  ConstMBVar('BODY_' + str(i), 'integer', i)
  ConstMBVar('ROD_' + str(i), 'integer', i)

n_ddnodes = N;
n_rods = N;
n_bodies = N;

ConstMBVar('m', 'real', 0.005)
ConstMBVar('EA', 'real', 3.0)
RelNodeNull = Position('', null())

nodes = []
bodies = []
rods = []
#endpreprocess

begin: control data;
  structural nodes: N;
  rigid bodies: N;
  joints: N;

  forces: 1;

  print: dof description;
end: control data;

#beginpreprocess
for i in range(N):
  x = cos(2*pi/N * i)
  y = sin(2*pi/N * i)
  z = 0.
  nodes.append(DynamicDisplacementNode('NODE_' + str(i), Position('', [x, y, z]), RelNodeNull))
  bodies.append(PointMass('BODY_' + str(i), nodes[i].idx, m))

for i in range(-1, N - 1):
  rods.append(Rod('ROD_' + str(i + 1), [nodes[i].idx, nodes[i + 1].idx], [RelNodeNull, RelNodeNull],
    ['linear elastic isotropic', 'EA']))
#endpreprocess

begin: nodes;
#beginpreprocess
[print(n) for n in nodes]
#endpreprocess
end: nodes;

begin:elements;
#beginpreprocess
[print(b) for b in bodies]
[print(r) for r in rods]
#endpreprocess

force: N + 1, absolute displacement,
  NODE_0,
    0., 0., 1., cosine, 0.01, pi, 0.05, forever, 0.;

end: elements;

# vim:ft=mbd
