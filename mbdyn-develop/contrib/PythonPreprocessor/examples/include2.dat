#beginpreprocess
RelNodeNull = Position('', null())
RelNodeEye = Position('', eye())
BeamOrientation = Position('', [1, 0., 0., 1., 2, 1., 0., 0.])

ConstMBVar('JDX', 'integer', 1)
ConstMBVar('IDX', 'integer', 100)
ConstMBVar('IDX1', 'integer', 1000)
ConstMBVar('IDX2', 'integer', 2000)
#IDX.declare()
ConstMBVar('IDX3', 'integer', 10000)
#IDX3 = NX + 6
#IDX3.declare()
nodes = []
bodies = []
joints = []
shells = []
beams = []

for i in range(NX+1):
        for j in range(NY+1):
                x = L / NX * i
                y = 0.#'sin(pi / NX * ' + str(i) +') * 1.E-3'
                z = h / NY * j
                nodes.append(DynamicNode(IDX + (NY + 1) * i + j, Position('', [x, y, z]), RelNodeEye, RelNodeNull, RelNodeNull))

for j in range(NY+1):
        joints.append(Clamp(JDX + j, IDX + j))

for i in range(NX):
        for j in range(NY):
                shells.append(Shell('shell4easans', IDX + NY * i + j,
                        [IDX + (NY + 1) * i + j, IDX + (NY + 1) * i + j + 1, IDX + (NY + 1) * (i + 1) + j + 1, IDX + (NY + 1) * (i + 1) + j],
                        ['isotropic', 'E', E, 'nu', nu, 'thickness', t]))

elastic_beam_cl = ['linear elastic generic', 'diag', EA, kGA, kGA, GJ, EJ, EJ]
for j in range(NY):
        beams.append(Beam(IDX1 + j, [IDX + (NY + 1) * (NX - 1) + j, IDX + (NY + 1) * (NX - 1) + j + 1], [RelNodeNull, RelNodeNull], [RelNodeEye, RelNodeEye],
        [BeamOrientation], [elastic_beam_cl]))

for i in range(len(shells)):
        for j in range(len(shells[i].nodes)):
                bodies.append(Body(IDX2 * j + i, shells[i].nodes[j], L * h * t * rho / NX / NY / 4, RelNodeNull, ['diag', 0., 0., 0.]))

for i in range(len(beams)):
        for j in range(len(beams[i].nodes)):
                bodies.append(Body(NX * NY * 4 + IDX2 * j  + i, beams[i].nodes[j], A * rho * h / NY / 2, RelNodeNull, ['diag', 0., 0., 0.]))

#endpreprocess

begin: nodes;
#beginpreprocess
[print(d) for d in nodes]
#endpreprocess
/*
structural: JDX, static,
        L,  -L1, 0.0,
        eye,
        null,
        null;
*/
structural: JDX + 1, dynamic,
        L - Lc, 0.0, -L1,
        eye,
        null,
        0., Omega, 0.;

end: nodes;
