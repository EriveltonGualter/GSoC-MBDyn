begin: data;
        problem: initial value;
end: data;

begin: initial value;
        initial time: 0.;
        final time: 0.4;
        time step: 3.e-4;

	method: ms, 0.6;
	#method: ms, 0.1;

        tolerance: 1.E-1;
        max iterations: 10;

        derivatives tolerance: 1e6;

	linear solver: umfpack, cc;

        output: iterations;
	threads: disable;
        #output: residual;
end: initial value;


#beginpreprocess
from __future__ import print_function, division
from MBDynLib import *

ConstMBVar('T', 'real', 0.2)

ConstMBVar('NX', 'integer', 4)
ConstMBVar('NY', 'integer', 4)
ConstMBVar('NC', 'integer', 2)
ConstMBVar('NP', 'integer', 4)
n_dynamic_nodes = (NX + 1) * (NY + 1)
n_static_nodes = 2
nshells = NX * NY
nbeams = NY
nels = nshells + nbeams + 3 + NY
nbodies = nshells * 4 + nbeams * 2

ConstMBVar('L','real', 1.)
ConstMBVar('t','real', 15.E-3)
ConstMBVar('Lc','real', 0.25)
ConstMBVar('Lp','real', 1.)

ConstMBVar('acpr', 'real', 0.04)
ConstMBVar('arr1', 'real', 0.06)
ConstMBVar('arr2', 'real', 0.03)
ConstMBVar('Acpr', 'real', acpr * acpr)
ConstMBVar('Arr1', 'real', arr1 * arr1)
ConstMBVar('Arr2', 'real', arr2 * arr2)
#J = ConstMBVar('J', 'real', '1. / 12 * a^4') #DOES NOT WORK WHEN I DEFINE EJ = E * J
ConstMBVar('Jcpr', 'real', 1. / 12 * pow(acpr, 4))
ConstMBVar('Jrr1', 'real', 1. / 12 * pow(arr1, 4))
ConstMBVar('Jrr2', 'real', 1. / 12 * pow(arr2, 4))

ConstMBVar('E','real', 73.E9)
ConstMBVar('nu','real', 0.3)
ConstMBVar('G','real', E/2/(1.+nu))
ConstMBVar('rho','real', 2700)

ConstMBVar('EAcpr', 'real', E * Acpr)
ConstMBVar('EJcpr', 'real', E * Jcpr)
ConstMBVar('GJcpr', 'real', G * 2.25 / 16. * Acpr * Acpr)
ConstMBVar('kGAcpr', 'real', 0.6 * G * Acpr)
ConstMBVar('EArr1', 'real', E * Arr1)
ConstMBVar('EJrr1', 'real', E * Jrr1)
ConstMBVar('GJrr1', 'real', G * 2.25 / 16. * Arr1 * Arr1)
ConstMBVar('kGArr1', 'real', 0.6 * G * Arr1)
ConstMBVar('EArr2', 'real', E * Arr2)
ConstMBVar('EJrr2', 'real', E * Jrr2)
ConstMBVar('GJrr2', 'real', G * 2.25 / 16. * Arr2 * Arr2)
ConstMBVar('kGArr2', 'real', 0.6 * G * Arr2)


RelNodeNull = Position('', null())
RelNodeEye = Position('', eye())
BeamOrientationrr = Position('', [1, 0., 1., 0., 2, 1., 0., 0.])
BeamOrientationcr = Position('', [1, 1., 0., 0., 2, 0., 1., 0.])
BeamOrientationpr = Position('', [1, 0., 0., 1., 2, 1., 0., 0.])

ConstMBVar('JDX', 'integer',       1)
ConstMBVar('IDX', 'integer',     100)
ConstMBVar('IDX1', 'integer',  1000)
ConstMBVar('IDX2', 'integer',  2000)
ConstMBVar('IDXc', 'integer',  4000)
ConstMBVar('IDXp', 'integer',  5000)
ConstMBVar('IDX3', 'integer', 10000)
ConstMBVar('IDX4', 'integer', 11000)

nodes = []
bodies = []
joints = []
shells = []
beams = []
#endpreprocess


begin: control data;
        structural nodes:
		(NX + 1) * (NY + 1) 
		+ (NP + 1) + (NC + 1)
	;
        beams:
		2 * NY + NP + NC
	;
        plates:
		NX * NY
	;
        joints:
		3 + 1 + 1 + 1
	;
	rigid bodies: 
		NX * NY * 4
		+ 2 * NY
		+ 2 * NY
		+ 2 * NP
		+ 2 * NC
	;
	print: dof description;
end: control data;

#beginpreprocess
for i in range(NX+1):
	for j in range(NY+1):
		x = L / NX * i
		y = L / NY * j
		z = 0.
		nodes.append(DynamicNode(IDX + (NY + 1) * i + j, Position('', [x, y, z]), RelNodeEye, RelNodeNull, RelNodeNull))

for i in range(NC+1):
	x = L - Lc + Lc / NC * i
	y = 0.
	z = -Lp
	nodes.append(DynamicNode(IDXc + i, Position('', [x, y, z]), RelNodeEye, RelNodeNull, RelNodeNull))

for i in range(NP+1):
	x = L
	y = 0.
	z = -Lp + Lp / NP * i
	nodes.append(DynamicNode(IDXp + i, Position('', [x, y, z]), RelNodeEye, RelNodeNull, RelNodeNull))


for i in range(NX):
	for j in range(NY):
		shells.append(Shell('shell4easans', IDX + NY * i + j, 
			[IDX + (NY + 1) * i + j, IDX + (NY + 1) * i + j + 1, IDX + (NY + 1) * (i + 1) + j + 1, IDX + (NY + 1) * (i + 1) + j], 
			['isotropic', 'E', E, 'nu', nu, 'thickness', t]))

elastic_beam_rr1 = ['linear elastic generic', 'diag', EArr1, kGArr1, kGArr1, GJrr1, EJrr1, EJrr1]
elastic_beam_rr2 = ['linear elastic generic', 'diag', EArr2, kGArr2, kGArr2, GJrr2, EJrr2, EJrr2]
for j in range(NY):
	beams.append(Beam(IDX1 + j, [IDX + j, IDX + j + 1], [RelNodeNull, RelNodeNull], [RelNodeEye, RelNodeEye],
	[BeamOrientationrr], [elastic_beam_rr1]))
	for i in range(2):
		bodies.append(Body(IDX3 + IDX2 * j  + i, beams[len(beams)-1].nodes[i], Arr1 * rho * L / NY / 2, RelNodeNull, ['diag', 0., 0., 0.]))
	beams.append(Beam(IDX2 + j, [IDX + (NX  - 1) * (NY + 1) + j, IDX + (NX  - 1) * (NY + 1) + j + 1], [RelNodeNull, RelNodeNull], [RelNodeEye, RelNodeEye],
	[BeamOrientationrr], [elastic_beam_rr2]))
	for i in range(2):
		bodies.append(Body(IDX3 + IDX2 * j  + 2 + i, beams[len(beams)-1].nodes[i], Arr2 * rho * L / NY / 2, RelNodeNull, ['diag', 0., 0., 0.]))

elastic_beam_cpr = ['linear elastic generic', 'diag', EAcpr, kGAcpr, kGAcpr, GJcpr, EJcpr, EJcpr]
for j in range(NC):
	beams.append(Beam(IDXc + j, [IDXc + j, IDXc + j + 1], [RelNodeNull, RelNodeNull], [RelNodeEye, RelNodeEye],
	[BeamOrientationcr], [elastic_beam_cpr]))
	for i in range(2):
		bodies.append(Body(IDX3 + IDX2 * j  + 4 + i, beams[len(beams)-1].nodes[i], Acpr * rho * Lc / NC / 2, RelNodeNull, ['diag', 0., 0., 0.]))
for j in range(NP):
	beams.append(Beam(IDXp + j, [IDXp + j, IDXp + j + 1], [RelNodeNull, RelNodeNull], [RelNodeEye, RelNodeEye],
	[BeamOrientationpr], [elastic_beam_cpr]))
	for i in range(2):
		bodies.append(Body(IDX3 + IDX2 * j  + 6 + i, beams[len(beams)-1].nodes[i], Acpr * rho * Lp / NP / 2, RelNodeNull, ['diag', 0., 0., 0.]))

for i in range(len(shells)):
	for j in range(4):
		bodies.append(Body(
		IDX2 * j + i, shells[i].nodes[j], L * L * t * rho / (NX * NX) / 4, RelNodeNull, ['diag', 0., 0., 0.]))
#endpreprocess

begin: nodes;
#beginpreprocess
[print(d) for d in nodes]
#endpreprocess
end: nodes;

begin: elements;
#beginpreprocess
[print(d) for d in bodies]
[print(d) for d in joints]
#endpreprocess

joint: JDX, revolute pin,
	IDX + (NY + 1) * 0 + 0,
		position, reference, node, null,
		orientation, 1, 0., 0., 1., 2, 1., 0., 0.,
	position, 0., 0., 0.,
	orientation, 1, 0., 0., 1., 2, 1., 0., 0.;

joint: JDX + 1, revolute pin,
	IDX + (NY + 1) * 0 + NY,
		position, reference, node, null,
		orientation, 1, 0., 0., 1., 2, 1., 0., 0.,
	position, 0., L, 0.,
	orientation, 1, 0., 0., 1., 2, 1., 0., 0.;

joint: JDX + 2, spherical hinge,
	IDX + (NY + 1) * NX, 
		position, reference, node, null,
	IDXp + NP,
		position, reference, node, null;

joint: JDX + 3, cardano hinge,
	IDXc + NC,
		position, reference, node, null,
		orientation, 1, 1., 0., 0., 2, 0., 0., 1.,
	IDXp + 0,
		position, reference, node, null,
		orientation, 1, 0., 0., 1, 2, 1., 0., 0.;

joint: JDX + 4, revolute pin,
	IDXc + 0,
		position, reference, node, null,
		orientation, 1, 0., 0., 1., 2, 1., 0., 0.,
	position, L - Lc, 0., -Lp,
	orientation, 1, 0., 0., 1., 2, 1., 0., 0.;

joint: JDX + 5, angular velocity, 
	IDXc, 
		0., 1., 0.,
		sine, 0., pi/T, -pi / 4. * pi / T, one, 0.;
	
#beginpreprocess
[print(d) for d in shells]
[print(d) for d in beams]

#endpreprocess
end: elements;
