diff -ur AeroSubs.f90 AeroSubs.f90
--- AeroSubs.f90	2007-04-22 22:20:38.000000000 +0200
+++ AeroSubs.f90	2008-01-03 23:18:49.000000000 +0100
@@ -355,7 +355,7 @@
 READ(LINE,*,ERR=205) NUMFOIL
 
 ALLOCATE ( FOILNM( NUMFOIL ) , STAT=Sttus )
-IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FOILNM array.' )
+IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FOILNM array.' )
 
 
  ! Open and read airfoil data file(s)
@@ -915,22 +915,22 @@
  ! Allocate local arrays with NTables dimension
 
    ALLOCATE ( CLPosPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CLPosPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CLPosPI array.' )
 
    ALLOCATE ( CDPosPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CDPosPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CDPosPI array.' )
 
    ALLOCATE ( CMPosPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CMPosPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CMPosPI array.' )
 
    ALLOCATE ( CLNegPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CLNegPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CLNegPI array.' )
 
    ALLOCATE ( CDNegPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CDNegPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CDNegPI array.' )
 
    ALLOCATE ( CMNegPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CMNegPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CMNegPI array.' )
 
 
  ! Read in airfoil data table identification array
@@ -1769,14 +1769,14 @@
  ! Allocate and initialize the local array on the first pass
 IF ( .NOT. ALLOCATED (OLD_A_NS) ) THEN
    ALLOCATE ( OLD_A_NS ( NELM, NB) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLD_A_NS array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLD_A_NS array.' )
    OLD_A_NS(:,:) = 0.0
 ENDIF
 
  ! Allocate and initialize the local array on the first pass
 IF ( .NOT. ALLOCATED (OLD_AP_NS) ) THEN
    ALLOCATE ( OLD_AP_NS ( NELM, NB) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLD_AP_NS array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLD_AP_NS array.' )
    OLD_AP_NS(:,:) = 0.0
 ENDIF
 
diff -ur GenSubs.f90 GenSubs.f90
--- GenSubs.f90	2007-04-22 22:20:38.000000000 +0200
+++ GenSubs.f90	2008-01-03 23:29:59.000000000 +0100
@@ -18,7 +18,7 @@
 Creator  = 'Windward Engineering LC' 
 
 SELECT CASE (TRIM(DynProg))
-   CASE ('ADAMS','YawDyn','SymDyn','FAST') ! These are expected
+   CASE ('ADAMS','YawDyn','SymDyn','FAST','MBDyn') ! These are expected
    CASE DEFAULT
    MESAGE = 'AeroDyn does not recognize the dynamics program name: '//Trim(DynProg)
    Frmt   = '(A/, ''  Unexpected problems may occur during simulation.'')'
@@ -58,222 +58,222 @@
 IF (Arg(1:7) == 'Element') THEN
 
    ALLOCATE ( ElPrList(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for ElPrList array.' )
+   IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for ElPrList array.' )
    ElPrList ( : ) = 0
 
    ALLOCATE ( A(NELM,NB) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for A array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for A array.' )
    A ( :, : ) = 0.0
 
    ALLOCATE ( AP(NELM,NB) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AP array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AP array.' )
 
 ! Beddoes arrays
    IF (DSTALL) THEN
 
       ALLOCATE ( ADOT(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ADOT array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ADOT array.' )
       ADOT ( :, : ) = 0.0
 
       ALLOCATE ( ADOT1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ADOT1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ADOT1 array.' )
 
       ALLOCATE ( AFE(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AFE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AFE array.' )
 
       ALLOCATE ( AFE1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AFE1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AFE1 array.' )
 
       ALLOCATE ( ANE(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ANE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ANE array.' )
       ANE ( :, : ) = 0.0
 
       ALLOCATE ( ANE1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ANE1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ANE1 array.' )
 
       ALLOCATE ( AOD(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AOD array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AOD array.' )
 
       ALLOCATE ( AOL(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AOL array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AOL array.' )
 
       ALLOCATE ( BEDSEP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for BEDSEP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for BEDSEP array.' )
 
       ALLOCATE ( CDO(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CDO array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CDO array.' )
 
       ALLOCATE ( CNA(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNA array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNA array.' )
 
       ALLOCATE ( CNP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNP array.' )
       CNP ( :, : ) = 0.0
 
       ALLOCATE ( CNP1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNP1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNP1 array.' )
 
       ALLOCATE ( CNPD(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNPD array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNPD array.' )
       CNPD ( :, : ) = 0.0
 
       ALLOCATE ( CNPD1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNPD1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNPD1 array.' )
 
       ALLOCATE ( CNPOT(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNPOT array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNPOT array.' )
       CNPOT ( :, : ) = 0.0
 
       ALLOCATE ( CNPOT1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNPOT1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNPOT1 array.' )
 
       ALLOCATE ( CNS(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNS array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNS array.' )
 
       ALLOCATE ( CNSL(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNSL array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNSL array.' )
 
       ALLOCATE ( CNV(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNV array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNV array.' )
       CNV ( :, : ) = 0.0
 
       ALLOCATE ( CVN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CVN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CVN array.' )
       CVN ( :, : ) = 0.0
 
       ALLOCATE ( CVN1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CVN1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CVN1 array.' )
 
       ALLOCATE ( DF(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DF array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DF array.' )
       DF( :, : ) = 0.0
 
       ALLOCATE ( DFAFE(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFAFE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFAFE array.' )
       DFAFE ( :, : ) = 0.0
 
       ALLOCATE ( DFAFE1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFAFE1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFAFE1 array.' )
  
       ALLOCATE ( DFC(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFC array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFC array.' )
       DFC ( :, : ) = 0.0
 
       ALLOCATE ( DN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DN array.' )
       DN ( :, : ) = 0.0
 
       ALLOCATE ( DPP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DP array.' )
       DPP ( :, : ) = 0.0
 
       ALLOCATE ( DQ(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DQ array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DQ array.' )
       DQ ( :, : ) = 0.0
 
       ALLOCATE ( DQP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DQP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DQP array.' )
       DQP ( :, : ) = 0.0
 
       ALLOCATE ( DQP1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DQP1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DQP1 array.' )
 
       ALLOCATE ( FSP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FSP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FSP array.' )
       FSP ( :, : ) = 0.0
 
       ALLOCATE ( FSP1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FSP1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FSP1 array.' )
 
       ALLOCATE ( FSPC(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FSPC array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FSPC array.' )
       FSPC ( :, : ) = 0.0
 
       ALLOCATE ( FSPC1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FSPC1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FSPC1 array.' )
 
       ALLOCATE ( OLDCNV(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDCNV array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDCNV array.' )
 
       ALLOCATE ( OLDDF(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDF array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDF array.' )
 
       ALLOCATE ( OLDDFC(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDFC array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDFC array.' )
 
       ALLOCATE ( OLDDN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDN array.' )
 
       ALLOCATE ( OLDDPP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDP array.' )
 
       ALLOCATE ( OLDDQ(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDQ array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDQ array.' )
 
       ALLOCATE ( OLDTAU(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDTAU array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDTAU array.' )
 
       ALLOCATE ( OLDXN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDXN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDXN array.' )
 
       ALLOCATE ( OLDYN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDYN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDYN array.' )
 
       ALLOCATE ( OLDSEP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDSEP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDSEP array.' )
 
       ALLOCATE ( QX(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for QX array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for QX array.' )
       QX ( :, : ) = 0.0
 
       ALLOCATE ( QX1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for QX1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for QX1 array.' )
 
       ALLOCATE ( TAU(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for TAU array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for TAU array.' )
 
       ALLOCATE ( XN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for XN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for XN array.' )
       XN ( :, : ) = 0.0
 
       ALLOCATE ( YN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for YN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for YN array.' )
       YN ( :, : ) = 0.0
 
    ENDIF ! Beddoes arrays
 
    ALLOCATE ( C(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for C array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for C array.' )
 
    ALLOCATE ( DR(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DR array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DR array.' )
 
    ALLOCATE ( RELM(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for RELM array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for RELM array.' )
 
    ALLOCATE ( TWIST(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for TWIST array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for TWIST array.' )
 
    ALLOCATE ( TLCNST(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for TLCNST array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for TLCNST array.' )
    TLCNST = 1.0
 
    ALLOCATE ( NFOIL(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for NFOIL array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for NFOIL array.' )
 
    ALLOCATE ( NLIFT(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for NLIFT array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for NLIFT array.' )
 
    ALLOCATE ( NTables(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for NTables array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for NTables array.' )
 
    IF (DYNINFL .OR. DYNINIT) THEN
       ALLOCATE ( RMC_SAVE ( NB, NELM, MAXINFL ) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for RMC_SAVE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for RMC_SAVE array.' )
       RMC_SAVE = 0.0
 
       ALLOCATE ( RMS_SAVE ( NB, NELM, MAXINFL ) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for RMS_SAVE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for RMS_SAVE array.' )
       RMS_SAVE = 0.0
    ENDIF
 
@@ -281,76 +281,76 @@
 ELSEIF (Arg(1:7) == 'ElPrint') THEN
 
    ALLOCATE ( AAA(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AAA array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AAA array.' )
 
    ALLOCATE ( AAP(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AAP array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AAP array.' )
 
    ALLOCATE ( ALF(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ALF array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ALF array.' )
 
    ALLOCATE ( CDD(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CDD array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CDD array.' )
 
    ALLOCATE ( CLL(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CLL array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CLL array.' )
 
    ALLOCATE ( CMM(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CMM array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CMM array.' )
 
    ALLOCATE ( CNN(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNN array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNN array.' )
 
    ALLOCATE ( CTT(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CTT array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CTT array.' )
 
    ALLOCATE ( DFNSAV(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFNSAV array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFNSAV array.' )
 
    ALLOCATE ( DFTSAV(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFTSAV array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFTSAV array.' )
 
    ALLOCATE ( DynPres(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DynPres array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DynPres array.' )
 
    ALLOCATE ( PMM(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for PMM array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for PMM array.' )
 
    ALLOCATE ( PITSAV(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for PITSAV array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for PITSAV array.' )
 
    ALLOCATE ( ReyNum(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ReyNum array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ReyNum array.' )
 
    ALLOCATE ( ElPrNum(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for ElPrNum array.' )
+   IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for ElPrNum array.' )
    ElPrNum ( : ) = 0
 
 
 ELSEIF (Arg(1:8) == 'Aerodata') THEN
 
    ALLOCATE ( AL(NumFoil,NumCL) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AL array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AL array.' )
 
    ALLOCATE ( CD(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CD array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CD array.' )
 
    ALLOCATE ( CL(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CL array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CL array.' )
 
    ALLOCATE ( CM(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CM array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CM array.' )
 
    ALLOCATE ( MulTabMet(NumFoil,MAXTABLE) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for MulTabMet array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for MulTabMet array.' )
 
    IF (DSTALL) THEN
 
       ALLOCATE ( FTB(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-     IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FTB array.' )
+     IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FTB array.' )
 
       ALLOCATE ( FTBC(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-     IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FTBC array.' )
+     IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FTBC array.' )
 
    ENDIF ! Beddoes arrays
 
@@ -1072,3 +1072,25 @@
 RETURN
 END FUNCTION CurTime
 
+
+ ! *****************************************************
+   SUBROUTINE AD_Abort( Msg )
+ !  This subroutine wraps calls to Abort.
+ !
+ ! Added by Pierangelo Masarati <masarati@aero.polimi.it>
+ ! January 2008 to allow compilation with gfortran,
+ ! for integration with the free general purpose multibody
+ ! analysis software MBDyn <http://www.aero.polimi.it/~mbdyn/>
+ ! *****************************************************
+
+USE               Identify
+
+IMPLICIT          NONE
+
+CHARACTER*1 Msg
+
+Write(Prog,'(A)') TRIM(Msg)
+
+CALL Abort;
+END SUBROUTINE AD_Abort
+
