This patch is provided by Pierangelo Masarati <masarati@aero.polimi.it>
to allow building AeroDyn as a library with gfortran (tested with 4.1.2) 
for linking with MBDyn's module-aerodyn.

It is provided AS IS, WITHOUT ANY EXPLICIT OR IMPLIED WARRANTY.

This patch is released under the same terms and conditions of AeroDyn

    --- o --- o --- o ---

To build AeroDyn as a library suitable for linking with MBDyn's
module-aerodyn:

- download AeroDyn version 12.58 (used to be available from
  <http://wind.nrel.gov/designcodes/simulators/aerodyn/>)
- apply the patch aerodyn-12.58-mbdyn.patch, available in the folder
  contrib/Patches/ of MBDyn's source tree
- execute

	gfortran -ffixed-line-length-none -ffree-line-length-none -fPIC -O -c *.f90
	ar ru libAeroDyn.a *.o

- copy libAeroDyn.a where it can be found by the linker, or directly
  in folder modules/module-aerodyn/ of MBDyn's source tree

- copy required .mod files generated by compiling libAeroDyn.a
  where they can be found by the compiler that will build module-aerodyn.so

    --- o --- o --- o ---

Please report bugs or issues related to integration and use with MBDyn
through the mailing list <mbdyn-users@mbdyn.org> (need to subscribe first;
instructions at <https://www.mbdyn.org/mailman/listinfo/mbdyn-users>)

    --- o --- o --- o ---

2008-09-06 Pierangelo Masarati <masarati@aero.polimi.it>
	* add default case for output file name in AD_InputGate
	* remove line length limitations
	  (use -ffixed-line-length-none -ffree-line-length-none instead)

2008-08-25 Pierangelo Masarati <masarati@aero.polimi.it>
	* release with MBDyn 1.3.4-Beta

2008-01-04 Pierangelo Masarati <masarati@aero.polimi.it>
	* add MBDyn to supported structural solvers
	* s/Abort/AD_Abort/
	* limit line length

Index: AeroSubs.f90
===================================================================
RCS file: /var/cvs/mbdyn/NREL/AeroDyn/AD_v1258/Source/AeroSubs.f90,v
retrieving revision 1.1
retrieving revision 1.5
diff -u -r1.1 -r1.5
--- AeroSubs.f90	4 Jan 2008 10:59:34 -0000	1.1
+++ AeroSubs.f90	13 Apr 2013 23:30:53 -0000	1.5
@@ -5,6 +5,11 @@
 
 !  UNIVERSITY OF UTAH, MECHANICAL ENGINEERING DEPARTMENT
 
+! Modified by Pierangelo Masarati <masarati@aero.polimi.it>
+! January 2008 to build with gfortran, for interfacing with
+! the free general-purpose multibody software MBDyn
+! <http://www.aero.polimi.it/~mbdyn/>
+
 ! *****************************************************
    SUBROUTINE ADInputGate
 !   This is the gateway to the input phase of AeroDyn
@@ -87,8 +92,7 @@
 REAL(ReKi)    :: T_Shad_Refpt
 
 CHARACTER(80) :: TITLE
-
-
+INTEGER*4 :: IDX
 
  ! Get the constants dependent on PI from GenSubs
 Call GetConstants
@@ -107,6 +111,16 @@
          CALL OpenOutFile(UnADopt, 'gfosub.opt')
       CASE ('FAST')
          CALL OpenOutFile(UnADopt, TRIM(DynProgRoot)//'.opt')
+ ! Default case added by Pierangelo Masarati 2008-09-06
+ ! trims '.ipt' extension, if any, and adds '.opt' extension
+ ! to input file name
+      CASE DEFAULT
+         IDX = Index(AeroInFile,".ipt")
+         IF (IDX > 0) THEN
+            CALL OpenOutFile(UnADopt, AeroInFile(1:IDX-1)//'.opt')
+         ELSE
+            CALL OpenOutFile(UnADopt, TRIM(AeroInFile)//'.opt')
+         ENDIF
    END SELECT
  ! Mimic data from input file
    CALL ADOut( T_Shad_Refpt, TITLE )
@@ -423,7 +437,7 @@
 READ(LINE,*,ERR=205) NUMFOIL
 
 ALLOCATE ( FOILNM( NUMFOIL ) , STAT=Sttus )
-IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FOILNM array.' )
+IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FOILNM array.' )
 
 
  ! Open and read airfoil data file(s)
@@ -446,7 +460,8 @@
 
 WndElIndex = 0
 
-R = 0.0
+!!! Initialized elsewhere (Jens van Schelve)
+!R = 0.0
 
  ! Read blade element data, check some inputs, convert twist to radians
 READ(UnADin,'( )',IOSTAT=IOS) ! The table header line
@@ -482,7 +497,8 @@
    TWIST(IELM) = TWIST(IELM)*DtoR
 
  ! Estimate rotor radius (value used only during initialization)
-   R = R + DR(IELM)
+!!! Initialized elsewhere (Jens van Schelve)
+!   R = R + DR(IELM)
 
    IndPrint = Index(LINE,"WIND")
    IF ((IndPrint > 0) .AND. (LINE(IndPrint-2:IndPrint-1) /= "NO")) THEN
@@ -1128,22 +1144,22 @@
  ! Allocate local arrays with NTables dimension
 
    ALLOCATE ( CLPosPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CLPosPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CLPosPI array.' )
 
    ALLOCATE ( CDPosPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CDPosPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CDPosPI array.' )
 
    ALLOCATE ( CMPosPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CMPosPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CMPosPI array.' )
 
    ALLOCATE ( CLNegPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CLNegPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CLNegPI array.' )
 
    ALLOCATE ( CDNegPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CDNegPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CDNegPI array.' )
 
    ALLOCATE ( CMNegPI(NTables(NFOILID)) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CMNegPI array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CMNegPI array.' )
 
 
  ! Read in airfoil data table identification array
@@ -1721,10 +1737,10 @@
    ! Allocate the array of time values.
 
 ALLOCATE ( Times4D(Num4Dt) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for Times4D array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for Times4D array.' )
 
 ALLOCATE ( Times4DIx(Num4Dt) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for Times4DIx array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for Times4DIx array.' )
 
    ! Open, read, and close the times file.
 
@@ -1816,25 +1832,25 @@
    ! Allocate the wind arrays.
 
 ALLOCATE ( FDu(Num4DxD,Num4DyD,Num4DzD,2) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for FDu array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for FDu array.' )
 
 ALLOCATE ( FDv(Num4DxD,Num4DyD,Num4DzD,2) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for FDv array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for FDv array.' )
 
 ALLOCATE ( FDw(Num4DxD,Num4DyD,Num4DzD,2) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for FDw array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for FDw array.' )
 
 
 IF ( ADVECT ) THEN
 
     ALLOCATE( FDuData(Num4DxD,Num4DyD,Num4DzD,Num4Dt), STAT=Sttus )
-    IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for FDuData array.' )
+    IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for FDuData array.' )
 
     ALLOCATE( FDvData(Num4DxD,Num4DyD,Num4DzD,Num4Dt), STAT=Sttus )
-    IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for FDvData array.' )
+    IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for FDvData array.' )
 
     ALLOCATE( FDwData(Num4DxD,Num4DyD,Num4DzD,Num4Dt), STAT=Sttus )
-    IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for FDwData array.' )
+    IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for FDwData array.' )
 
     CALL ReadALL4DData(UnWind)
 
@@ -2527,7 +2543,7 @@
 
 IF ( IOS /= 0 )  THEN
     Advect  = .FALSE.
-   !CALL Abort ( ' Error reading Advect in 4D-wind-parameter file, "'//TRIM( FileName )//'".' )
+   !CALL AD_Abort ( ' Error reading Advect in 4D-wind-parameter file, "'//TRIM( FileName )//'".' )
 
 ELSE
 
@@ -2561,7 +2577,7 @@
          READ (Unit,*,IOSTAT=IOS) AdvFiles(I)
 
          IF ( IOS /= 0 )  THEN
-            !CALL Abort ( ' Error reading AdvFiles in 4D-wind-parameter file, "'//TRIM( FileName )//'".' )
+            !CALL AD_Abort ( ' Error reading AdvFiles in 4D-wind-parameter file, "'//TRIM( FileName )//'".' )
 
             MESAGE = ' Error reading AdvFiles in 4D-wind-parameter file, "'//TRIM( FileName )//'".'
 
@@ -3132,14 +3148,14 @@
  ! Allocate and initialize the local array on the first pass
 IF ( .NOT. ALLOCATED (OLD_A_NS) ) THEN
    ALLOCATE ( OLD_A_NS ( NELM, NB) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLD_A_NS array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLD_A_NS array.' )
    OLD_A_NS(:,:) = 0.0
 ENDIF
 
  ! Allocate and initialize the local array on the first pass
 IF ( .NOT. ALLOCATED (OLD_AP_NS) ) THEN
    ALLOCATE ( OLD_AP_NS ( NELM, NB) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLD_AP_NS array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLD_AP_NS array.' )
    OLD_AP_NS(:,:) = 0.0
 ENDIF
 
@@ -8202,13 +8218,13 @@
    ! Allocate the array of time values.
 
 ALLOCATE ( TimesCT(NumCTt) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for TimesCT array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for TimesCT array.' )
 
 
    ! Allocate the array of time step numbers.
 
 ALLOCATE ( TimeStpCT(NumCTt) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for TimeStpCT array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for TimeStpCT array.' )
 
 
 DO IT=1,NumCTt
@@ -8267,13 +8283,13 @@
    ! Allocate the wind arrays.
 
 ALLOCATE ( CTu(NumCTyD,NumCTzD,2) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for CTu array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for CTu array.' )
 
 ALLOCATE ( CTv(NumCTyD,NumCTzD,2) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for CTv array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for CTv array.' )
 
 ALLOCATE ( CTw(NumCTyD,NumCTzD,2) , STAT=Sttus )
-IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for CTw array.' )
+IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for CTw array.' )
 
 
    ! Determine the first file needed for this simulation.
Index: GenSubs.f90
===================================================================
RCS file: /var/cvs/mbdyn/NREL/AeroDyn/AD_v1258/Source/GenSubs.f90,v
retrieving revision 1.1
retrieving revision 1.4
diff -u -r1.1 -r1.4
--- GenSubs.f90	4 Jan 2008 10:59:34 -0000	1.1
+++ GenSubs.f90	4 Jan 2008 11:27:24 -0000	1.4
@@ -1,3 +1,8 @@
+! Modified by Pierangelo Masarati <masarati@aero.polimi.it>
+! January 2008 to build with gfortran, for interfacing with
+! the free general-purpose multibody software MBDyn
+! <http://www.aero.polimi.it/~mbdyn/>
+
  ! *****************************************************
    SUBROUTINE SetProgName
  !  This subroutine writes the dynamic and aerodynamic
@@ -23,7 +28,7 @@
 Creator  = 'Windward Engineering LC'
 
 SELECT CASE (TRIM(DynProg))
-   CASE ('ADAMS','YawDyn','SymDyn','FAST') ! These are expected
+   CASE ('ADAMS','YawDyn','SymDyn','FAST','MBDyn') ! These are expected
    CASE DEFAULT
    MESAGE = 'AeroDyn does not recognize the dynamics program name: '//Trim(DynProg)
    Frmt   = '(A/, ''  Unexpected problems may occur during simulation.'')'
@@ -40,7 +45,7 @@
 
 
  ! *****************************************************
-   SUBROUTINE Abort ( Mesage )
+   SUBROUTINE AD_Abort ( Mesage )
  !  This subroutine writes an error message to the screen
  !  and exits the program with an error level of 1.
  ! *****************************************************
@@ -68,7 +73,7 @@
 
 
 
-END SUBROUTINE Abort
+END SUBROUTINE AD_Abort
 
 
 
@@ -106,230 +111,230 @@
 IF (Arg(1:7) == 'Element') THEN
 
    ALLOCATE ( ElPrList(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for ElPrList array.' )
+   IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for ElPrList array.' )
    ElPrList ( : ) = 0
 
    ALLOCATE ( WndElPrList(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for WndElPrList array.' )
+   IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for WndElPrList array.' )
    WndElPrList ( : ) = 0
 
    ALLOCATE ( A(NELM,NB) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for A array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for A array.' )
    A ( :, : ) = 0.0
 
    ALLOCATE ( AP(NELM,NB) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AP array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AP array.' )
 
 ! Beddoes arrays
    IF (DSTALL) THEN
 
       ALLOCATE ( ADOT(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ADOT array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ADOT array.' )
       ADOT ( :, : ) = 0.0
 
       ALLOCATE ( ADOT1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ADOT1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ADOT1 array.' )
 
       ALLOCATE ( AFE(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AFE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AFE array.' )
 
       ALLOCATE ( AFE1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AFE1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AFE1 array.' )
 
       ALLOCATE ( ANE(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ANE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ANE array.' )
       ANE ( :, : ) = 0.0
 
       ALLOCATE ( ANE1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ANE1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ANE1 array.' )
 
       ALLOCATE ( AOD(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AOD array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AOD array.' )
 
       ALLOCATE ( AOL(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AOL array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AOL array.' )
 
       ALLOCATE ( BEDSEP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for BEDSEP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for BEDSEP array.' )
 
       ALLOCATE ( CDO(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CDO array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CDO array.' )
 
       ALLOCATE ( CNA(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNA array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNA array.' )
 
       ALLOCATE ( CNP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNP array.' )
       CNP ( :, : ) = 0.0
 
       ALLOCATE ( CNP1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNP1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNP1 array.' )
 
       ALLOCATE ( CNPD(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNPD array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNPD array.' )
       CNPD ( :, : ) = 0.0
 
       ALLOCATE ( CNPD1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNPD1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNPD1 array.' )
 
       ALLOCATE ( CNPOT(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNPOT array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNPOT array.' )
       CNPOT ( :, : ) = 0.0
 
       ALLOCATE ( CNPOT1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNPOT1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNPOT1 array.' )
 
       ALLOCATE ( CNS(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNS array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNS array.' )
 
       ALLOCATE ( CNSL(NELM,MAXTABLE) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNSL array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNSL array.' )
 
       ALLOCATE ( CNV(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNV array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNV array.' )
       CNV ( :, : ) = 0.0
 
       ALLOCATE ( CVN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CVN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CVN array.' )
       CVN ( :, : ) = 0.0
 
       ALLOCATE ( CVN1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CVN1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CVN1 array.' )
 
       ALLOCATE ( DF(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DF array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DF array.' )
       DF( :, : ) = 0.0
 
       ALLOCATE ( DFAFE(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFAFE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFAFE array.' )
       DFAFE ( :, : ) = 0.0
 
       ALLOCATE ( DFAFE1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFAFE1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFAFE1 array.' )
 
       ALLOCATE ( DFC(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFC array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFC array.' )
       DFC ( :, : ) = 0.0
 
       ALLOCATE ( DN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DN array.' )
       DN ( :, : ) = 0.0
 
       ALLOCATE ( DPP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DP array.' )
       DPP ( :, : ) = 0.0
 
       ALLOCATE ( DQ(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DQ array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DQ array.' )
       DQ ( :, : ) = 0.0
 
       ALLOCATE ( DQP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DQP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DQP array.' )
       DQP ( :, : ) = 0.0
 
       ALLOCATE ( DQP1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DQP1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DQP1 array.' )
 
       ALLOCATE ( FSP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FSP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FSP array.' )
       FSP ( :, : ) = 0.0
 
       ALLOCATE ( FSP1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FSP1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FSP1 array.' )
 
       ALLOCATE ( FSPC(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FSPC array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FSPC array.' )
       FSPC ( :, : ) = 0.0
 
       ALLOCATE ( FSPC1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FSPC1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FSPC1 array.' )
 
       ALLOCATE ( OLDCNV(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDCNV array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDCNV array.' )
 
       ALLOCATE ( OLDDF(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDF array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDF array.' )
 
       ALLOCATE ( OLDDFC(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDFC array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDFC array.' )
 
       ALLOCATE ( OLDDN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDN array.' )
 
       ALLOCATE ( OLDDPP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDP array.' )
 
       ALLOCATE ( OLDDQ(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDDQ array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDDQ array.' )
 
       ALLOCATE ( OLDTAU(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDTAU array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDTAU array.' )
 
       ALLOCATE ( OLDXN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDXN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDXN array.' )
 
       ALLOCATE ( OLDYN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDYN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDYN array.' )
 
       ALLOCATE ( OLDSEP(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for OLDSEP array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for OLDSEP array.' )
 
       ALLOCATE ( QX(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for QX array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for QX array.' )
       QX ( :, : ) = 0.0
 
       ALLOCATE ( QX1(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for QX1 array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for QX1 array.' )
 
       ALLOCATE ( TAU(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for TAU array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for TAU array.' )
 
       ALLOCATE ( XN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for XN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for XN array.' )
       XN ( :, : ) = 0.0
 
       ALLOCATE ( YN(NELM,NB) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for YN array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for YN array.' )
       YN ( :, : ) = 0.0
 
    ENDIF ! Beddoes arrays
 
    ALLOCATE ( C(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for C array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for C array.' )
 
    ALLOCATE ( DR(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DR array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DR array.' )
 
    ALLOCATE ( RELM(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for RELM array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for RELM array.' )
 
    ALLOCATE ( TWIST(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for TWIST array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for TWIST array.' )
 
    ALLOCATE ( TLCNST(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for TLCNST array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for TLCNST array.' )
    TLCNST = 99.0
 
    ALLOCATE ( HLCNST(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for HLCNST array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for HLCNST array.' )
    HLCNST = 99.0
 
    ALLOCATE ( NFOIL(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for NFOIL array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for NFOIL array.' )
 
    ALLOCATE ( NLIFT(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for NLIFT array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for NLIFT array.' )
 
    ALLOCATE ( NTables(NELM) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for NTables array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for NTables array.' )
 
    IF (DYNINFL .OR. DYNINIT) THEN
       ALLOCATE ( RMC_SAVE ( NB, NELM, MAXINFL ) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for RMC_SAVE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for RMC_SAVE array.' )
       RMC_SAVE = 0.0
 
       ALLOCATE ( RMS_SAVE ( NB, NELM, MAXINFL ) , STAT=Sttus )
-      IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for RMS_SAVE array.' )
+      IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for RMS_SAVE array.' )
       RMS_SAVE = 0.0
    ENDIF
 
@@ -337,89 +342,89 @@
 ELSEIF (Arg(1:7) == 'ElPrint') THEN
 
    ALLOCATE ( AAA(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AAA array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AAA array.' )
 
    ALLOCATE ( AAP(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AAP array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AAP array.' )
 
    ALLOCATE ( ALF(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ALF array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ALF array.' )
 
    ALLOCATE ( CDD(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CDD array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CDD array.' )
 
    ALLOCATE ( CLL(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CLL array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CLL array.' )
 
    ALLOCATE ( CMM(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CMM array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CMM array.' )
 
    ALLOCATE ( CNN(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CNN array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CNN array.' )
 
    ALLOCATE ( CTT(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CTT array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CTT array.' )
 
    ALLOCATE ( DFNSAV(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFNSAV array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFNSAV array.' )
 
    ALLOCATE ( DFTSAV(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DFTSAV array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DFTSAV array.' )
 
    ALLOCATE ( DynPres(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for DynPres array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for DynPres array.' )
 
    ALLOCATE ( PMM(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for PMM array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for PMM array.' )
 
    ALLOCATE ( PITSAV(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for PITSAV array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for PITSAV array.' )
 
    ALLOCATE ( ReyNum(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for ReyNum array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for ReyNum array.' )
 
    ALLOCATE ( ElPrNum(NumElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for ElPrNum array.' )
+   IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for ElPrNum array.' )
    ElPrNum ( : ) = 0
 
    ALLOCATE ( WndElPrNum(NumWndElOut) , STAT=Sttus )
-   IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for WndElPrNum array.' )
+   IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for WndElPrNum array.' )
    WndElPrNum ( : ) = 0
 
    ALLOCATE ( SaveVX(NumWndElOut,NB) , STAT=Sttus )
-   IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for SaveVX array.' )
+   IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for SaveVX array.' )
 
    ALLOCATE ( SaveVY(NumWndElOut,NB) , STAT=Sttus )
-   IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for SaveVY array.' )
+   IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for SaveVY array.' )
 
    ALLOCATE ( SaveVZ(NumWndElOut,NB) , STAT=Sttus )
-   IF ( Sttus /= 0 )  CALL Abort ( ' Error allocating memory for SaveVZ array.' )
+   IF ( Sttus /= 0 )  CALL AD_Abort ( ' Error allocating memory for SaveVZ array.' )
 
 
 ELSEIF (Arg(1:8) == 'Aerodata') THEN
 
    ALLOCATE ( AL(NumFoil,NumCL) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for AL array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for AL array.' )
 
    ALLOCATE ( CD(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CD array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CD array.' )
 
    ALLOCATE ( CL(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CL array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CL array.' )
 
    ALLOCATE ( CM(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for CM array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for CM array.' )
 
    ALLOCATE ( MulTabMet(NumFoil,MAXTABLE) , STAT=Sttus )
-   IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for MulTabMet array.' )
+   IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for MulTabMet array.' )
 
    IF (DSTALL) THEN
 
       ALLOCATE ( FTB(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-     IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FTB array.' )
+     IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FTB array.' )
 
       ALLOCATE ( FTBC(NumFoil,NumCL,MAXTABLE) , STAT=Sttus )
-     IF ( Sttus /= 0 ) CALL Abort ( ' Error allocating memory for FTBC array.' )
+     IF ( Sttus /= 0 ) CALL AD_Abort ( ' Error allocating memory for FTBC array.' )
 
    ENDIF ! Beddoes arrays
 
